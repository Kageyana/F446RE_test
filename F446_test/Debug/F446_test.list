
F446_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032ac  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  0800347c  0800347c  0001347c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003538  08003538  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003538  08003538  00013538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003540  08003540  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003540  08003540  00013540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003544  08003544  00013544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003548  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000070  080035b8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  080035b8  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ae5  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016c8  00000000  00000000  00028b85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000750  00000000  00000000  0002a250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006b8  00000000  00000000  0002a9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021acd  00000000  00000000  0002b058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000096e2  00000000  00000000  0004cb25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c97df  00000000  00000000  00056207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011f9e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002470  00000000  00000000  0011fa38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003464 	.word	0x08003464

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08003464 	.word	0x08003464

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xFFFF);
 80005bc:	1d39      	adds	r1, r7, #4
 80005be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005c2:	2201      	movs	r2, #1
 80005c4:	4803      	ldr	r0, [pc, #12]	; (80005d4 <__io_putchar+0x20>)
 80005c6:	f001 fc18 	bl	8001dfa <HAL_UART_Transmit>
	return ch;
 80005ca:	687b      	ldr	r3, [r7, #4]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	2000008c 	.word	0x2000008c

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int cnt = 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f000 faab 	bl	8000b3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f823 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 f8b9 	bl	8000760 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ee:	f000 f88d 	bl	800070c <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);   //LEDを点灯
 80005f2:	2201      	movs	r2, #1
 80005f4:	2120      	movs	r1, #32
 80005f6:	480c      	ldr	r0, [pc, #48]	; (8000628 <main+0x50>)
 80005f8:	f000 fdb0 	bl	800115c <HAL_GPIO_WritePin>
	printf("cnt: %d\r\n", cnt++);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	1c5a      	adds	r2, r3, #1
 8000600:	607a      	str	r2, [r7, #4]
 8000602:	4619      	mov	r1, r3
 8000604:	4809      	ldr	r0, [pc, #36]	; (800062c <main+0x54>)
 8000606:	f001 ff9f 	bl	8002548 <iprintf>
	HAL_Delay(1500); //500ms待つ
 800060a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800060e:	f000 fb07 	bl	8000c20 <HAL_Delay>
	HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET); //LEDを消灯
 8000612:	2200      	movs	r2, #0
 8000614:	2120      	movs	r1, #32
 8000616:	4804      	ldr	r0, [pc, #16]	; (8000628 <main+0x50>)
 8000618:	f000 fda0 	bl	800115c <HAL_GPIO_WritePin>
	HAL_Delay(1500); //500ms待つ
 800061c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000620:	f000 fafe 	bl	8000c20 <HAL_Delay>
	HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);   //LEDを点灯
 8000624:	e7e5      	b.n	80005f2 <main+0x1a>
 8000626:	bf00      	nop
 8000628:	40020000 	.word	0x40020000
 800062c:	0800347c 	.word	0x0800347c

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b094      	sub	sp, #80	; 0x50
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 031c 	add.w	r3, r7, #28
 800063a:	2234      	movs	r2, #52	; 0x34
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f001 ff7a 	bl	8002538 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	f107 0308 	add.w	r3, r7, #8
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000654:	2300      	movs	r3, #0
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	4b2a      	ldr	r3, [pc, #168]	; (8000704 <SystemClock_Config+0xd4>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	4a29      	ldr	r2, [pc, #164]	; (8000704 <SystemClock_Config+0xd4>)
 800065e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000662:	6413      	str	r3, [r2, #64]	; 0x40
 8000664:	4b27      	ldr	r3, [pc, #156]	; (8000704 <SystemClock_Config+0xd4>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000670:	2300      	movs	r3, #0
 8000672:	603b      	str	r3, [r7, #0]
 8000674:	4b24      	ldr	r3, [pc, #144]	; (8000708 <SystemClock_Config+0xd8>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800067c:	4a22      	ldr	r2, [pc, #136]	; (8000708 <SystemClock_Config+0xd8>)
 800067e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000682:	6013      	str	r3, [r2, #0]
 8000684:	4b20      	ldr	r3, [pc, #128]	; (8000708 <SystemClock_Config+0xd8>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800068c:	603b      	str	r3, [r7, #0]
 800068e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000690:	2302      	movs	r3, #2
 8000692:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000694:	2301      	movs	r3, #1
 8000696:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000698:	2310      	movs	r3, #16
 800069a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069c:	2302      	movs	r3, #2
 800069e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a0:	2300      	movs	r3, #0
 80006a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006a4:	2310      	movs	r3, #16
 80006a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006a8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006ac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006ae:	2304      	movs	r3, #4
 80006b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006b2:	2302      	movs	r3, #2
 80006b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ba:	f107 031c 	add.w	r3, r7, #28
 80006be:	4618      	mov	r0, r3
 80006c0:	f001 f8b0 	bl	8001824 <HAL_RCC_OscConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006ca:	f000 f8b7 	bl	800083c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ce:	230f      	movs	r3, #15
 80006d0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d2:	2302      	movs	r3, #2
 80006d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006e4:	f107 0308 	add.w	r3, r7, #8
 80006e8:	2102      	movs	r1, #2
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 fd50 	bl	8001190 <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006f6:	f000 f8a1 	bl	800083c <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	3750      	adds	r7, #80	; 0x50
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800
 8000708:	40007000 	.word	0x40007000

0800070c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000712:	4a12      	ldr	r2, [pc, #72]	; (800075c <MX_USART2_UART_Init+0x50>)
 8000714:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000716:	4b10      	ldr	r3, [pc, #64]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000718:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800071c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000732:	220c      	movs	r2, #12
 8000734:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000744:	f001 fb0c 	bl	8001d60 <HAL_UART_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800074e:	f000 f875 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	2000008c 	.word	0x2000008c
 800075c:	40004400 	.word	0x40004400

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	; 0x28
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	4b2d      	ldr	r3, [pc, #180]	; (8000830 <MX_GPIO_Init+0xd0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a2c      	ldr	r2, [pc, #176]	; (8000830 <MX_GPIO_Init+0xd0>)
 8000780:	f043 0304 	orr.w	r3, r3, #4
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b2a      	ldr	r3, [pc, #168]	; (8000830 <MX_GPIO_Init+0xd0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0304 	and.w	r3, r3, #4
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	4b26      	ldr	r3, [pc, #152]	; (8000830 <MX_GPIO_Init+0xd0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a25      	ldr	r2, [pc, #148]	; (8000830 <MX_GPIO_Init+0xd0>)
 800079c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b23      	ldr	r3, [pc, #140]	; (8000830 <MX_GPIO_Init+0xd0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	4b1f      	ldr	r3, [pc, #124]	; (8000830 <MX_GPIO_Init+0xd0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a1e      	ldr	r2, [pc, #120]	; (8000830 <MX_GPIO_Init+0xd0>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <MX_GPIO_Init+0xd0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b18      	ldr	r3, [pc, #96]	; (8000830 <MX_GPIO_Init+0xd0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a17      	ldr	r2, [pc, #92]	; (8000830 <MX_GPIO_Init+0xd0>)
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b15      	ldr	r3, [pc, #84]	; (8000830 <MX_GPIO_Init+0xd0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0302 	and.w	r3, r3, #2
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2120      	movs	r1, #32
 80007ea:	4812      	ldr	r0, [pc, #72]	; (8000834 <MX_GPIO_Init+0xd4>)
 80007ec:	f000 fcb6 	bl	800115c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007f6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	4619      	mov	r1, r3
 8000806:	480c      	ldr	r0, [pc, #48]	; (8000838 <MX_GPIO_Init+0xd8>)
 8000808:	f000 fb14 	bl	8000e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_G_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin;
 800080c:	2320      	movs	r3, #32
 800080e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000810:	2301      	movs	r3, #1
 8000812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	2300      	movs	r3, #0
 800081a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	4619      	mov	r1, r3
 8000822:	4804      	ldr	r0, [pc, #16]	; (8000834 <MX_GPIO_Init+0xd4>)
 8000824:	f000 fb06 	bl	8000e34 <HAL_GPIO_Init>

}
 8000828:	bf00      	nop
 800082a:	3728      	adds	r7, #40	; 0x28
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40023800 	.word	0x40023800
 8000834:	40020000 	.word	0x40020000
 8000838:	40020800 	.word	0x40020800

0800083c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000840:	b672      	cpsid	i
}
 8000842:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000844:	e7fe      	b.n	8000844 <Error_Handler+0x8>
	...

08000848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	4b10      	ldr	r3, [pc, #64]	; (8000894 <HAL_MspInit+0x4c>)
 8000854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000856:	4a0f      	ldr	r2, [pc, #60]	; (8000894 <HAL_MspInit+0x4c>)
 8000858:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800085c:	6453      	str	r3, [r2, #68]	; 0x44
 800085e:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <HAL_MspInit+0x4c>)
 8000860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	603b      	str	r3, [r7, #0]
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <HAL_MspInit+0x4c>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000872:	4a08      	ldr	r2, [pc, #32]	; (8000894 <HAL_MspInit+0x4c>)
 8000874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000878:	6413      	str	r3, [r2, #64]	; 0x40
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <HAL_MspInit+0x4c>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000886:	2007      	movs	r0, #7
 8000888:	f000 faa0 	bl	8000dcc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40023800 	.word	0x40023800

08000898 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08a      	sub	sp, #40	; 0x28
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a19      	ldr	r2, [pc, #100]	; (800091c <HAL_UART_MspInit+0x84>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d12b      	bne.n	8000912 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	613b      	str	r3, [r7, #16]
 80008be:	4b18      	ldr	r3, [pc, #96]	; (8000920 <HAL_UART_MspInit+0x88>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c2:	4a17      	ldr	r2, [pc, #92]	; (8000920 <HAL_UART_MspInit+0x88>)
 80008c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c8:	6413      	str	r3, [r2, #64]	; 0x40
 80008ca:	4b15      	ldr	r3, [pc, #84]	; (8000920 <HAL_UART_MspInit+0x88>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008d2:	613b      	str	r3, [r7, #16]
 80008d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <HAL_UART_MspInit+0x88>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a10      	ldr	r2, [pc, #64]	; (8000920 <HAL_UART_MspInit+0x88>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <HAL_UART_MspInit+0x88>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008f2:	230c      	movs	r3, #12
 80008f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f6:	2302      	movs	r3, #2
 80008f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fe:	2303      	movs	r3, #3
 8000900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000902:	2307      	movs	r3, #7
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	4619      	mov	r1, r3
 800090c:	4805      	ldr	r0, [pc, #20]	; (8000924 <HAL_UART_MspInit+0x8c>)
 800090e:	f000 fa91 	bl	8000e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000912:	bf00      	nop
 8000914:	3728      	adds	r7, #40	; 0x28
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40004400 	.word	0x40004400
 8000920:	40023800 	.word	0x40023800
 8000924:	40020000 	.word	0x40020000

08000928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800092c:	e7fe      	b.n	800092c <NMI_Handler+0x4>

0800092e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000932:	e7fe      	b.n	8000932 <HardFault_Handler+0x4>

08000934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <MemManage_Handler+0x4>

0800093a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800093e:	e7fe      	b.n	800093e <BusFault_Handler+0x4>

08000940 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <UsageFault_Handler+0x4>

08000946 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr

08000962 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000974:	f000 f934 	bl	8000be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}

0800097c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]
 800098c:	e00a      	b.n	80009a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800098e:	f3af 8000 	nop.w
 8000992:	4601      	mov	r1, r0
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	1c5a      	adds	r2, r3, #1
 8000998:	60ba      	str	r2, [r7, #8]
 800099a:	b2ca      	uxtb	r2, r1
 800099c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	3301      	adds	r3, #1
 80009a2:	617b      	str	r3, [r7, #20]
 80009a4:	697a      	ldr	r2, [r7, #20]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	dbf0      	blt.n	800098e <_read+0x12>
	}

return len;
 80009ac:	687b      	ldr	r3, [r7, #4]
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3718      	adds	r7, #24
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b086      	sub	sp, #24
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	60f8      	str	r0, [r7, #12]
 80009be:	60b9      	str	r1, [r7, #8]
 80009c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c2:	2300      	movs	r3, #0
 80009c4:	617b      	str	r3, [r7, #20]
 80009c6:	e009      	b.n	80009dc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	1c5a      	adds	r2, r3, #1
 80009cc:	60ba      	str	r2, [r7, #8]
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff fdef 	bl	80005b4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	3301      	adds	r3, #1
 80009da:	617b      	str	r3, [r7, #20]
 80009dc:	697a      	ldr	r2, [r7, #20]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	dbf1      	blt.n	80009c8 <_write+0x12>
	}
	return len;
 80009e4:	687b      	ldr	r3, [r7, #4]
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3718      	adds	r7, #24
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <_close>:

int _close(int file)
{
 80009ee:	b480      	push	{r7}
 80009f0:	b083      	sub	sp, #12
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
	return -1;
 80009f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr

08000a06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a06:	b480      	push	{r7}
 8000a08:	b083      	sub	sp, #12
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
 8000a0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a16:	605a      	str	r2, [r3, #4]
	return 0;
 8000a18:	2300      	movs	r3, #0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr

08000a26 <_isatty>:

int _isatty(int file)
{
 8000a26:	b480      	push	{r7}
 8000a28:	b083      	sub	sp, #12
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
	return 1;
 8000a2e:	2301      	movs	r3, #1
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
	return 0;
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3714      	adds	r7, #20
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
	...

08000a58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a60:	4a14      	ldr	r2, [pc, #80]	; (8000ab4 <_sbrk+0x5c>)
 8000a62:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <_sbrk+0x60>)
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a6c:	4b13      	ldr	r3, [pc, #76]	; (8000abc <_sbrk+0x64>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d102      	bne.n	8000a7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a74:	4b11      	ldr	r3, [pc, #68]	; (8000abc <_sbrk+0x64>)
 8000a76:	4a12      	ldr	r2, [pc, #72]	; (8000ac0 <_sbrk+0x68>)
 8000a78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a7a:	4b10      	ldr	r3, [pc, #64]	; (8000abc <_sbrk+0x64>)
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4413      	add	r3, r2
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d207      	bcs.n	8000a98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a88:	f001 fd2c 	bl	80024e4 <__errno>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	220c      	movs	r2, #12
 8000a90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a92:	f04f 33ff 	mov.w	r3, #4294967295
 8000a96:	e009      	b.n	8000aac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a98:	4b08      	ldr	r3, [pc, #32]	; (8000abc <_sbrk+0x64>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a9e:	4b07      	ldr	r3, [pc, #28]	; (8000abc <_sbrk+0x64>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	4a05      	ldr	r2, [pc, #20]	; (8000abc <_sbrk+0x64>)
 8000aa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3718      	adds	r7, #24
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20020000 	.word	0x20020000
 8000ab8:	00000400 	.word	0x00000400
 8000abc:	200000d0 	.word	0x200000d0
 8000ac0:	200000e8 	.word	0x200000e8

08000ac4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <SystemInit+0x20>)
 8000aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ace:	4a05      	ldr	r2, [pc, #20]	; (8000ae4 <SystemInit+0x20>)
 8000ad0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ae8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aec:	480d      	ldr	r0, [pc, #52]	; (8000b24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000aee:	490e      	ldr	r1, [pc, #56]	; (8000b28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000af0:	4a0e      	ldr	r2, [pc, #56]	; (8000b2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af4:	e002      	b.n	8000afc <LoopCopyDataInit>

08000af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afa:	3304      	adds	r3, #4

08000afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b00:	d3f9      	bcc.n	8000af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b02:	4a0b      	ldr	r2, [pc, #44]	; (8000b30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b04:	4c0b      	ldr	r4, [pc, #44]	; (8000b34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b08:	e001      	b.n	8000b0e <LoopFillZerobss>

08000b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b0c:	3204      	adds	r2, #4

08000b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b10:	d3fb      	bcc.n	8000b0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b12:	f7ff ffd7 	bl	8000ac4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b16:	f001 fceb 	bl	80024f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b1a:	f7ff fd5d 	bl	80005d8 <main>
  bx  lr    
 8000b1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b28:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b2c:	08003548 	.word	0x08003548
  ldr r2, =_sbss
 8000b30:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b34:	200000e8 	.word	0x200000e8

08000b38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b38:	e7fe      	b.n	8000b38 <ADC_IRQHandler>
	...

08000b3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b40:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <HAL_Init+0x40>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a0d      	ldr	r2, [pc, #52]	; (8000b7c <HAL_Init+0x40>)
 8000b46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b4c:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <HAL_Init+0x40>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <HAL_Init+0x40>)
 8000b52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <HAL_Init+0x40>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a07      	ldr	r2, [pc, #28]	; (8000b7c <HAL_Init+0x40>)
 8000b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b64:	2003      	movs	r0, #3
 8000b66:	f000 f931 	bl	8000dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f000 f808 	bl	8000b80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b70:	f7ff fe6a 	bl	8000848 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40023c00 	.word	0x40023c00

08000b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <HAL_InitTick+0x54>)
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <HAL_InitTick+0x58>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	4619      	mov	r1, r3
 8000b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 f93b 	bl	8000e1a <HAL_SYSTICK_Config>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	e00e      	b.n	8000bcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2b0f      	cmp	r3, #15
 8000bb2:	d80a      	bhi.n	8000bca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bbc:	f000 f911 	bl	8000de2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bc0:	4a06      	ldr	r2, [pc, #24]	; (8000bdc <HAL_InitTick+0x5c>)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e000      	b.n	8000bcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000000 	.word	0x20000000
 8000bd8:	20000008 	.word	0x20000008
 8000bdc:	20000004 	.word	0x20000004

08000be0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <HAL_IncTick+0x20>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <HAL_IncTick+0x24>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4413      	add	r3, r2
 8000bf0:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <HAL_IncTick+0x24>)
 8000bf2:	6013      	str	r3, [r2, #0]
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	20000008 	.word	0x20000008
 8000c04:	200000d4 	.word	0x200000d4

08000c08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c0c:	4b03      	ldr	r3, [pc, #12]	; (8000c1c <HAL_GetTick+0x14>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	200000d4 	.word	0x200000d4

08000c20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c28:	f7ff ffee 	bl	8000c08 <HAL_GetTick>
 8000c2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c38:	d005      	beq.n	8000c46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <HAL_Delay+0x44>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	461a      	mov	r2, r3
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	4413      	add	r3, r2
 8000c44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c46:	bf00      	nop
 8000c48:	f7ff ffde 	bl	8000c08 <HAL_GetTick>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	68fa      	ldr	r2, [r7, #12]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d8f7      	bhi.n	8000c48 <HAL_Delay+0x28>
  {
  }
}
 8000c58:	bf00      	nop
 8000c5a:	bf00      	nop
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000008 	.word	0x20000008

08000c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f003 0307 	and.w	r3, r3, #7
 8000c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <__NVIC_SetPriorityGrouping+0x44>)
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c7e:	68ba      	ldr	r2, [r7, #8]
 8000c80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c84:	4013      	ands	r3, r2
 8000c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9a:	4a04      	ldr	r2, [pc, #16]	; (8000cac <__NVIC_SetPriorityGrouping+0x44>)
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	60d3      	str	r3, [r2, #12]
}
 8000ca0:	bf00      	nop
 8000ca2:	3714      	adds	r7, #20
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb4:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	0a1b      	lsrs	r3, r3, #8
 8000cba:	f003 0307 	and.w	r3, r3, #7
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	6039      	str	r1, [r7, #0]
 8000cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	db0a      	blt.n	8000cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	b2da      	uxtb	r2, r3
 8000ce4:	490c      	ldr	r1, [pc, #48]	; (8000d18 <__NVIC_SetPriority+0x4c>)
 8000ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cea:	0112      	lsls	r2, r2, #4
 8000cec:	b2d2      	uxtb	r2, r2
 8000cee:	440b      	add	r3, r1
 8000cf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf4:	e00a      	b.n	8000d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	4908      	ldr	r1, [pc, #32]	; (8000d1c <__NVIC_SetPriority+0x50>)
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	f003 030f 	and.w	r3, r3, #15
 8000d02:	3b04      	subs	r3, #4
 8000d04:	0112      	lsls	r2, r2, #4
 8000d06:	b2d2      	uxtb	r2, r2
 8000d08:	440b      	add	r3, r1
 8000d0a:	761a      	strb	r2, [r3, #24]
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000e100 	.word	0xe000e100
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b089      	sub	sp, #36	; 0x24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	f1c3 0307 	rsb	r3, r3, #7
 8000d3a:	2b04      	cmp	r3, #4
 8000d3c:	bf28      	it	cs
 8000d3e:	2304      	movcs	r3, #4
 8000d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	3304      	adds	r3, #4
 8000d46:	2b06      	cmp	r3, #6
 8000d48:	d902      	bls.n	8000d50 <NVIC_EncodePriority+0x30>
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	3b03      	subs	r3, #3
 8000d4e:	e000      	b.n	8000d52 <NVIC_EncodePriority+0x32>
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d54:	f04f 32ff 	mov.w	r2, #4294967295
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	43da      	mvns	r2, r3
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	401a      	ands	r2, r3
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d68:	f04f 31ff 	mov.w	r1, #4294967295
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d72:	43d9      	mvns	r1, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d78:	4313      	orrs	r3, r2
         );
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3724      	adds	r7, #36	; 0x24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
	...

08000d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d98:	d301      	bcc.n	8000d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e00f      	b.n	8000dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <SysTick_Config+0x40>)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000da6:	210f      	movs	r1, #15
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dac:	f7ff ff8e 	bl	8000ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <SysTick_Config+0x40>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db6:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <SysTick_Config+0x40>)
 8000db8:	2207      	movs	r2, #7
 8000dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	e000e010 	.word	0xe000e010

08000dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f7ff ff47 	bl	8000c68 <__NVIC_SetPriorityGrouping>
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b086      	sub	sp, #24
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	4603      	mov	r3, r0
 8000dea:	60b9      	str	r1, [r7, #8]
 8000dec:	607a      	str	r2, [r7, #4]
 8000dee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df4:	f7ff ff5c 	bl	8000cb0 <__NVIC_GetPriorityGrouping>
 8000df8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	68b9      	ldr	r1, [r7, #8]
 8000dfe:	6978      	ldr	r0, [r7, #20]
 8000e00:	f7ff ff8e 	bl	8000d20 <NVIC_EncodePriority>
 8000e04:	4602      	mov	r2, r0
 8000e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff5d 	bl	8000ccc <__NVIC_SetPriority>
}
 8000e12:	bf00      	nop
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff ffb0 	bl	8000d88 <SysTick_Config>
 8000e28:	4603      	mov	r3, r0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b089      	sub	sp, #36	; 0x24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]
 8000e4e:	e165      	b.n	800111c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e50:	2201      	movs	r2, #1
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	697a      	ldr	r2, [r7, #20]
 8000e60:	4013      	ands	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	f040 8154 	bne.w	8001116 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f003 0303 	and.w	r3, r3, #3
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d005      	beq.n	8000e86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d130      	bne.n	8000ee8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	2203      	movs	r2, #3
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43db      	mvns	r3, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	68da      	ldr	r2, [r3, #12]
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	091b      	lsrs	r3, r3, #4
 8000ed2:	f003 0201 	and.w	r2, r3, #1
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f003 0303 	and.w	r3, r3, #3
 8000ef0:	2b03      	cmp	r3, #3
 8000ef2:	d017      	beq.n	8000f24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	2203      	movs	r2, #3
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d123      	bne.n	8000f78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	08da      	lsrs	r2, r3, #3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3208      	adds	r2, #8
 8000f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	f003 0307 	and.w	r3, r3, #7
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	220f      	movs	r2, #15
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4013      	ands	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	691a      	ldr	r2, [r3, #16]
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	08da      	lsrs	r2, r3, #3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3208      	adds	r2, #8
 8000f72:	69b9      	ldr	r1, [r7, #24]
 8000f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	2203      	movs	r2, #3
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 0203 	and.w	r2, r3, #3
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	f000 80ae 	beq.w	8001116 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	4b5d      	ldr	r3, [pc, #372]	; (8001134 <HAL_GPIO_Init+0x300>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc2:	4a5c      	ldr	r2, [pc, #368]	; (8001134 <HAL_GPIO_Init+0x300>)
 8000fc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fca:	4b5a      	ldr	r3, [pc, #360]	; (8001134 <HAL_GPIO_Init+0x300>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fd6:	4a58      	ldr	r2, [pc, #352]	; (8001138 <HAL_GPIO_Init+0x304>)
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	089b      	lsrs	r3, r3, #2
 8000fdc:	3302      	adds	r3, #2
 8000fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	220f      	movs	r2, #15
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a4f      	ldr	r2, [pc, #316]	; (800113c <HAL_GPIO_Init+0x308>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d025      	beq.n	800104e <HAL_GPIO_Init+0x21a>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a4e      	ldr	r2, [pc, #312]	; (8001140 <HAL_GPIO_Init+0x30c>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d01f      	beq.n	800104a <HAL_GPIO_Init+0x216>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a4d      	ldr	r2, [pc, #308]	; (8001144 <HAL_GPIO_Init+0x310>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d019      	beq.n	8001046 <HAL_GPIO_Init+0x212>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a4c      	ldr	r2, [pc, #304]	; (8001148 <HAL_GPIO_Init+0x314>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d013      	beq.n	8001042 <HAL_GPIO_Init+0x20e>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a4b      	ldr	r2, [pc, #300]	; (800114c <HAL_GPIO_Init+0x318>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d00d      	beq.n	800103e <HAL_GPIO_Init+0x20a>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a4a      	ldr	r2, [pc, #296]	; (8001150 <HAL_GPIO_Init+0x31c>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d007      	beq.n	800103a <HAL_GPIO_Init+0x206>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a49      	ldr	r2, [pc, #292]	; (8001154 <HAL_GPIO_Init+0x320>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d101      	bne.n	8001036 <HAL_GPIO_Init+0x202>
 8001032:	2306      	movs	r3, #6
 8001034:	e00c      	b.n	8001050 <HAL_GPIO_Init+0x21c>
 8001036:	2307      	movs	r3, #7
 8001038:	e00a      	b.n	8001050 <HAL_GPIO_Init+0x21c>
 800103a:	2305      	movs	r3, #5
 800103c:	e008      	b.n	8001050 <HAL_GPIO_Init+0x21c>
 800103e:	2304      	movs	r3, #4
 8001040:	e006      	b.n	8001050 <HAL_GPIO_Init+0x21c>
 8001042:	2303      	movs	r3, #3
 8001044:	e004      	b.n	8001050 <HAL_GPIO_Init+0x21c>
 8001046:	2302      	movs	r3, #2
 8001048:	e002      	b.n	8001050 <HAL_GPIO_Init+0x21c>
 800104a:	2301      	movs	r3, #1
 800104c:	e000      	b.n	8001050 <HAL_GPIO_Init+0x21c>
 800104e:	2300      	movs	r3, #0
 8001050:	69fa      	ldr	r2, [r7, #28]
 8001052:	f002 0203 	and.w	r2, r2, #3
 8001056:	0092      	lsls	r2, r2, #2
 8001058:	4093      	lsls	r3, r2
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4313      	orrs	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001060:	4935      	ldr	r1, [pc, #212]	; (8001138 <HAL_GPIO_Init+0x304>)
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	089b      	lsrs	r3, r3, #2
 8001066:	3302      	adds	r3, #2
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800106e:	4b3a      	ldr	r3, [pc, #232]	; (8001158 <HAL_GPIO_Init+0x324>)
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	43db      	mvns	r3, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4013      	ands	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	4313      	orrs	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001092:	4a31      	ldr	r2, [pc, #196]	; (8001158 <HAL_GPIO_Init+0x324>)
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001098:	4b2f      	ldr	r3, [pc, #188]	; (8001158 <HAL_GPIO_Init+0x324>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	43db      	mvns	r3, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4013      	ands	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d003      	beq.n	80010bc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010bc:	4a26      	ldr	r2, [pc, #152]	; (8001158 <HAL_GPIO_Init+0x324>)
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010c2:	4b25      	ldr	r3, [pc, #148]	; (8001158 <HAL_GPIO_Init+0x324>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	43db      	mvns	r3, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4013      	ands	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010e6:	4a1c      	ldr	r2, [pc, #112]	; (8001158 <HAL_GPIO_Init+0x324>)
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010ec:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <HAL_GPIO_Init+0x324>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d003      	beq.n	8001110 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	4313      	orrs	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001110:	4a11      	ldr	r2, [pc, #68]	; (8001158 <HAL_GPIO_Init+0x324>)
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3301      	adds	r3, #1
 800111a:	61fb      	str	r3, [r7, #28]
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	2b0f      	cmp	r3, #15
 8001120:	f67f ae96 	bls.w	8000e50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001124:	bf00      	nop
 8001126:	bf00      	nop
 8001128:	3724      	adds	r7, #36	; 0x24
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	40023800 	.word	0x40023800
 8001138:	40013800 	.word	0x40013800
 800113c:	40020000 	.word	0x40020000
 8001140:	40020400 	.word	0x40020400
 8001144:	40020800 	.word	0x40020800
 8001148:	40020c00 	.word	0x40020c00
 800114c:	40021000 	.word	0x40021000
 8001150:	40021400 	.word	0x40021400
 8001154:	40021800 	.word	0x40021800
 8001158:	40013c00 	.word	0x40013c00

0800115c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	807b      	strh	r3, [r7, #2]
 8001168:	4613      	mov	r3, r2
 800116a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800116c:	787b      	ldrb	r3, [r7, #1]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001172:	887a      	ldrh	r2, [r7, #2]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001178:	e003      	b.n	8001182 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800117a:	887b      	ldrh	r3, [r7, #2]
 800117c:	041a      	lsls	r2, r3, #16
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	619a      	str	r2, [r3, #24]
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d101      	bne.n	80011a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e0cc      	b.n	800133e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011a4:	4b68      	ldr	r3, [pc, #416]	; (8001348 <HAL_RCC_ClockConfig+0x1b8>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 030f 	and.w	r3, r3, #15
 80011ac:	683a      	ldr	r2, [r7, #0]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d90c      	bls.n	80011cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011b2:	4b65      	ldr	r3, [pc, #404]	; (8001348 <HAL_RCC_ClockConfig+0x1b8>)
 80011b4:	683a      	ldr	r2, [r7, #0]
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ba:	4b63      	ldr	r3, [pc, #396]	; (8001348 <HAL_RCC_ClockConfig+0x1b8>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 030f 	and.w	r3, r3, #15
 80011c2:	683a      	ldr	r2, [r7, #0]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d001      	beq.n	80011cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e0b8      	b.n	800133e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d020      	beq.n	800121a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0304 	and.w	r3, r3, #4
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d005      	beq.n	80011f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011e4:	4b59      	ldr	r3, [pc, #356]	; (800134c <HAL_RCC_ClockConfig+0x1bc>)
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	4a58      	ldr	r2, [pc, #352]	; (800134c <HAL_RCC_ClockConfig+0x1bc>)
 80011ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80011ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0308 	and.w	r3, r3, #8
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d005      	beq.n	8001208 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011fc:	4b53      	ldr	r3, [pc, #332]	; (800134c <HAL_RCC_ClockConfig+0x1bc>)
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	4a52      	ldr	r2, [pc, #328]	; (800134c <HAL_RCC_ClockConfig+0x1bc>)
 8001202:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001206:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001208:	4b50      	ldr	r3, [pc, #320]	; (800134c <HAL_RCC_ClockConfig+0x1bc>)
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	494d      	ldr	r1, [pc, #308]	; (800134c <HAL_RCC_ClockConfig+0x1bc>)
 8001216:	4313      	orrs	r3, r2
 8001218:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	2b00      	cmp	r3, #0
 8001224:	d044      	beq.n	80012b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d107      	bne.n	800123e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800122e:	4b47      	ldr	r3, [pc, #284]	; (800134c <HAL_RCC_ClockConfig+0x1bc>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d119      	bne.n	800126e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e07f      	b.n	800133e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	2b02      	cmp	r3, #2
 8001244:	d003      	beq.n	800124e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800124a:	2b03      	cmp	r3, #3
 800124c:	d107      	bne.n	800125e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800124e:	4b3f      	ldr	r3, [pc, #252]	; (800134c <HAL_RCC_ClockConfig+0x1bc>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d109      	bne.n	800126e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e06f      	b.n	800133e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800125e:	4b3b      	ldr	r3, [pc, #236]	; (800134c <HAL_RCC_ClockConfig+0x1bc>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d101      	bne.n	800126e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e067      	b.n	800133e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800126e:	4b37      	ldr	r3, [pc, #220]	; (800134c <HAL_RCC_ClockConfig+0x1bc>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f023 0203 	bic.w	r2, r3, #3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	4934      	ldr	r1, [pc, #208]	; (800134c <HAL_RCC_ClockConfig+0x1bc>)
 800127c:	4313      	orrs	r3, r2
 800127e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001280:	f7ff fcc2 	bl	8000c08 <HAL_GetTick>
 8001284:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001286:	e00a      	b.n	800129e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001288:	f7ff fcbe 	bl	8000c08 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	f241 3288 	movw	r2, #5000	; 0x1388
 8001296:	4293      	cmp	r3, r2
 8001298:	d901      	bls.n	800129e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e04f      	b.n	800133e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800129e:	4b2b      	ldr	r3, [pc, #172]	; (800134c <HAL_RCC_ClockConfig+0x1bc>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f003 020c 	and.w	r2, r3, #12
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d1eb      	bne.n	8001288 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012b0:	4b25      	ldr	r3, [pc, #148]	; (8001348 <HAL_RCC_ClockConfig+0x1b8>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 030f 	and.w	r3, r3, #15
 80012b8:	683a      	ldr	r2, [r7, #0]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d20c      	bcs.n	80012d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012be:	4b22      	ldr	r3, [pc, #136]	; (8001348 <HAL_RCC_ClockConfig+0x1b8>)
 80012c0:	683a      	ldr	r2, [r7, #0]
 80012c2:	b2d2      	uxtb	r2, r2
 80012c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012c6:	4b20      	ldr	r3, [pc, #128]	; (8001348 <HAL_RCC_ClockConfig+0x1b8>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 030f 	and.w	r3, r3, #15
 80012ce:	683a      	ldr	r2, [r7, #0]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d001      	beq.n	80012d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e032      	b.n	800133e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d008      	beq.n	80012f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012e4:	4b19      	ldr	r3, [pc, #100]	; (800134c <HAL_RCC_ClockConfig+0x1bc>)
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	4916      	ldr	r1, [pc, #88]	; (800134c <HAL_RCC_ClockConfig+0x1bc>)
 80012f2:	4313      	orrs	r3, r2
 80012f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0308 	and.w	r3, r3, #8
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d009      	beq.n	8001316 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001302:	4b12      	ldr	r3, [pc, #72]	; (800134c <HAL_RCC_ClockConfig+0x1bc>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	691b      	ldr	r3, [r3, #16]
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	490e      	ldr	r1, [pc, #56]	; (800134c <HAL_RCC_ClockConfig+0x1bc>)
 8001312:	4313      	orrs	r3, r2
 8001314:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001316:	f000 f855 	bl	80013c4 <HAL_RCC_GetSysClockFreq>
 800131a:	4602      	mov	r2, r0
 800131c:	4b0b      	ldr	r3, [pc, #44]	; (800134c <HAL_RCC_ClockConfig+0x1bc>)
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	091b      	lsrs	r3, r3, #4
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	490a      	ldr	r1, [pc, #40]	; (8001350 <HAL_RCC_ClockConfig+0x1c0>)
 8001328:	5ccb      	ldrb	r3, [r1, r3]
 800132a:	fa22 f303 	lsr.w	r3, r2, r3
 800132e:	4a09      	ldr	r2, [pc, #36]	; (8001354 <HAL_RCC_ClockConfig+0x1c4>)
 8001330:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <HAL_RCC_ClockConfig+0x1c8>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff fc22 	bl	8000b80 <HAL_InitTick>

  return HAL_OK;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40023c00 	.word	0x40023c00
 800134c:	40023800 	.word	0x40023800
 8001350:	08003488 	.word	0x08003488
 8001354:	20000000 	.word	0x20000000
 8001358:	20000004 	.word	0x20000004

0800135c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001360:	4b03      	ldr	r3, [pc, #12]	; (8001370 <HAL_RCC_GetHCLKFreq+0x14>)
 8001362:	681b      	ldr	r3, [r3, #0]
}
 8001364:	4618      	mov	r0, r3
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	20000000 	.word	0x20000000

08001374 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001378:	f7ff fff0 	bl	800135c <HAL_RCC_GetHCLKFreq>
 800137c:	4602      	mov	r2, r0
 800137e:	4b05      	ldr	r3, [pc, #20]	; (8001394 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	0a9b      	lsrs	r3, r3, #10
 8001384:	f003 0307 	and.w	r3, r3, #7
 8001388:	4903      	ldr	r1, [pc, #12]	; (8001398 <HAL_RCC_GetPCLK1Freq+0x24>)
 800138a:	5ccb      	ldrb	r3, [r1, r3]
 800138c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001390:	4618      	mov	r0, r3
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40023800 	.word	0x40023800
 8001398:	08003498 	.word	0x08003498

0800139c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80013a0:	f7ff ffdc 	bl	800135c <HAL_RCC_GetHCLKFreq>
 80013a4:	4602      	mov	r2, r0
 80013a6:	4b05      	ldr	r3, [pc, #20]	; (80013bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	0b5b      	lsrs	r3, r3, #13
 80013ac:	f003 0307 	and.w	r3, r3, #7
 80013b0:	4903      	ldr	r1, [pc, #12]	; (80013c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80013b2:	5ccb      	ldrb	r3, [r1, r3]
 80013b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40023800 	.word	0x40023800
 80013c0:	08003498 	.word	0x08003498

080013c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013c8:	b0ae      	sub	sp, #184	; 0xb8
 80013ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80013cc:	2300      	movs	r3, #0
 80013ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80013d2:	2300      	movs	r3, #0
 80013d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80013d8:	2300      	movs	r3, #0
 80013da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80013de:	2300      	movs	r3, #0
 80013e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80013e4:	2300      	movs	r3, #0
 80013e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013ea:	4bcb      	ldr	r3, [pc, #812]	; (8001718 <HAL_RCC_GetSysClockFreq+0x354>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f003 030c 	and.w	r3, r3, #12
 80013f2:	2b0c      	cmp	r3, #12
 80013f4:	f200 8206 	bhi.w	8001804 <HAL_RCC_GetSysClockFreq+0x440>
 80013f8:	a201      	add	r2, pc, #4	; (adr r2, 8001400 <HAL_RCC_GetSysClockFreq+0x3c>)
 80013fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013fe:	bf00      	nop
 8001400:	08001435 	.word	0x08001435
 8001404:	08001805 	.word	0x08001805
 8001408:	08001805 	.word	0x08001805
 800140c:	08001805 	.word	0x08001805
 8001410:	0800143d 	.word	0x0800143d
 8001414:	08001805 	.word	0x08001805
 8001418:	08001805 	.word	0x08001805
 800141c:	08001805 	.word	0x08001805
 8001420:	08001445 	.word	0x08001445
 8001424:	08001805 	.word	0x08001805
 8001428:	08001805 	.word	0x08001805
 800142c:	08001805 	.word	0x08001805
 8001430:	08001635 	.word	0x08001635
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001434:	4bb9      	ldr	r3, [pc, #740]	; (800171c <HAL_RCC_GetSysClockFreq+0x358>)
 8001436:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800143a:	e1e7      	b.n	800180c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800143c:	4bb8      	ldr	r3, [pc, #736]	; (8001720 <HAL_RCC_GetSysClockFreq+0x35c>)
 800143e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001442:	e1e3      	b.n	800180c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001444:	4bb4      	ldr	r3, [pc, #720]	; (8001718 <HAL_RCC_GetSysClockFreq+0x354>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800144c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001450:	4bb1      	ldr	r3, [pc, #708]	; (8001718 <HAL_RCC_GetSysClockFreq+0x354>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d071      	beq.n	8001540 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800145c:	4bae      	ldr	r3, [pc, #696]	; (8001718 <HAL_RCC_GetSysClockFreq+0x354>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	099b      	lsrs	r3, r3, #6
 8001462:	2200      	movs	r2, #0
 8001464:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001468:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800146c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001470:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001474:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001478:	2300      	movs	r3, #0
 800147a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800147e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001482:	4622      	mov	r2, r4
 8001484:	462b      	mov	r3, r5
 8001486:	f04f 0000 	mov.w	r0, #0
 800148a:	f04f 0100 	mov.w	r1, #0
 800148e:	0159      	lsls	r1, r3, #5
 8001490:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001494:	0150      	lsls	r0, r2, #5
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	4621      	mov	r1, r4
 800149c:	1a51      	subs	r1, r2, r1
 800149e:	6439      	str	r1, [r7, #64]	; 0x40
 80014a0:	4629      	mov	r1, r5
 80014a2:	eb63 0301 	sbc.w	r3, r3, r1
 80014a6:	647b      	str	r3, [r7, #68]	; 0x44
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	f04f 0300 	mov.w	r3, #0
 80014b0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80014b4:	4649      	mov	r1, r9
 80014b6:	018b      	lsls	r3, r1, #6
 80014b8:	4641      	mov	r1, r8
 80014ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014be:	4641      	mov	r1, r8
 80014c0:	018a      	lsls	r2, r1, #6
 80014c2:	4641      	mov	r1, r8
 80014c4:	1a51      	subs	r1, r2, r1
 80014c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80014c8:	4649      	mov	r1, r9
 80014ca:	eb63 0301 	sbc.w	r3, r3, r1
 80014ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014d0:	f04f 0200 	mov.w	r2, #0
 80014d4:	f04f 0300 	mov.w	r3, #0
 80014d8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80014dc:	4649      	mov	r1, r9
 80014de:	00cb      	lsls	r3, r1, #3
 80014e0:	4641      	mov	r1, r8
 80014e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80014e6:	4641      	mov	r1, r8
 80014e8:	00ca      	lsls	r2, r1, #3
 80014ea:	4610      	mov	r0, r2
 80014ec:	4619      	mov	r1, r3
 80014ee:	4603      	mov	r3, r0
 80014f0:	4622      	mov	r2, r4
 80014f2:	189b      	adds	r3, r3, r2
 80014f4:	633b      	str	r3, [r7, #48]	; 0x30
 80014f6:	462b      	mov	r3, r5
 80014f8:	460a      	mov	r2, r1
 80014fa:	eb42 0303 	adc.w	r3, r2, r3
 80014fe:	637b      	str	r3, [r7, #52]	; 0x34
 8001500:	f04f 0200 	mov.w	r2, #0
 8001504:	f04f 0300 	mov.w	r3, #0
 8001508:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800150c:	4629      	mov	r1, r5
 800150e:	024b      	lsls	r3, r1, #9
 8001510:	4621      	mov	r1, r4
 8001512:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001516:	4621      	mov	r1, r4
 8001518:	024a      	lsls	r2, r1, #9
 800151a:	4610      	mov	r0, r2
 800151c:	4619      	mov	r1, r3
 800151e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001522:	2200      	movs	r2, #0
 8001524:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001528:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800152c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001530:	f7fe febe 	bl	80002b0 <__aeabi_uldivmod>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4613      	mov	r3, r2
 800153a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800153e:	e067      	b.n	8001610 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001540:	4b75      	ldr	r3, [pc, #468]	; (8001718 <HAL_RCC_GetSysClockFreq+0x354>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	099b      	lsrs	r3, r3, #6
 8001546:	2200      	movs	r2, #0
 8001548:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800154c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001550:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001558:	67bb      	str	r3, [r7, #120]	; 0x78
 800155a:	2300      	movs	r3, #0
 800155c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800155e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001562:	4622      	mov	r2, r4
 8001564:	462b      	mov	r3, r5
 8001566:	f04f 0000 	mov.w	r0, #0
 800156a:	f04f 0100 	mov.w	r1, #0
 800156e:	0159      	lsls	r1, r3, #5
 8001570:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001574:	0150      	lsls	r0, r2, #5
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4621      	mov	r1, r4
 800157c:	1a51      	subs	r1, r2, r1
 800157e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001580:	4629      	mov	r1, r5
 8001582:	eb63 0301 	sbc.w	r3, r3, r1
 8001586:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001588:	f04f 0200 	mov.w	r2, #0
 800158c:	f04f 0300 	mov.w	r3, #0
 8001590:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001594:	4649      	mov	r1, r9
 8001596:	018b      	lsls	r3, r1, #6
 8001598:	4641      	mov	r1, r8
 800159a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800159e:	4641      	mov	r1, r8
 80015a0:	018a      	lsls	r2, r1, #6
 80015a2:	4641      	mov	r1, r8
 80015a4:	ebb2 0a01 	subs.w	sl, r2, r1
 80015a8:	4649      	mov	r1, r9
 80015aa:	eb63 0b01 	sbc.w	fp, r3, r1
 80015ae:	f04f 0200 	mov.w	r2, #0
 80015b2:	f04f 0300 	mov.w	r3, #0
 80015b6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80015ba:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80015be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80015c2:	4692      	mov	sl, r2
 80015c4:	469b      	mov	fp, r3
 80015c6:	4623      	mov	r3, r4
 80015c8:	eb1a 0303 	adds.w	r3, sl, r3
 80015cc:	623b      	str	r3, [r7, #32]
 80015ce:	462b      	mov	r3, r5
 80015d0:	eb4b 0303 	adc.w	r3, fp, r3
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
 80015d6:	f04f 0200 	mov.w	r2, #0
 80015da:	f04f 0300 	mov.w	r3, #0
 80015de:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80015e2:	4629      	mov	r1, r5
 80015e4:	028b      	lsls	r3, r1, #10
 80015e6:	4621      	mov	r1, r4
 80015e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80015ec:	4621      	mov	r1, r4
 80015ee:	028a      	lsls	r2, r1, #10
 80015f0:	4610      	mov	r0, r2
 80015f2:	4619      	mov	r1, r3
 80015f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015f8:	2200      	movs	r2, #0
 80015fa:	673b      	str	r3, [r7, #112]	; 0x70
 80015fc:	677a      	str	r2, [r7, #116]	; 0x74
 80015fe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001602:	f7fe fe55 	bl	80002b0 <__aeabi_uldivmod>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4613      	mov	r3, r2
 800160c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001610:	4b41      	ldr	r3, [pc, #260]	; (8001718 <HAL_RCC_GetSysClockFreq+0x354>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	0c1b      	lsrs	r3, r3, #16
 8001616:	f003 0303 	and.w	r3, r3, #3
 800161a:	3301      	adds	r3, #1
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001622:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001626:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800162a:	fbb2 f3f3 	udiv	r3, r2, r3
 800162e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001632:	e0eb      	b.n	800180c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001634:	4b38      	ldr	r3, [pc, #224]	; (8001718 <HAL_RCC_GetSysClockFreq+0x354>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800163c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001640:	4b35      	ldr	r3, [pc, #212]	; (8001718 <HAL_RCC_GetSysClockFreq+0x354>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d06b      	beq.n	8001724 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800164c:	4b32      	ldr	r3, [pc, #200]	; (8001718 <HAL_RCC_GetSysClockFreq+0x354>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	099b      	lsrs	r3, r3, #6
 8001652:	2200      	movs	r2, #0
 8001654:	66bb      	str	r3, [r7, #104]	; 0x68
 8001656:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001658:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800165a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800165e:	663b      	str	r3, [r7, #96]	; 0x60
 8001660:	2300      	movs	r3, #0
 8001662:	667b      	str	r3, [r7, #100]	; 0x64
 8001664:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001668:	4622      	mov	r2, r4
 800166a:	462b      	mov	r3, r5
 800166c:	f04f 0000 	mov.w	r0, #0
 8001670:	f04f 0100 	mov.w	r1, #0
 8001674:	0159      	lsls	r1, r3, #5
 8001676:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800167a:	0150      	lsls	r0, r2, #5
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	4621      	mov	r1, r4
 8001682:	1a51      	subs	r1, r2, r1
 8001684:	61b9      	str	r1, [r7, #24]
 8001686:	4629      	mov	r1, r5
 8001688:	eb63 0301 	sbc.w	r3, r3, r1
 800168c:	61fb      	str	r3, [r7, #28]
 800168e:	f04f 0200 	mov.w	r2, #0
 8001692:	f04f 0300 	mov.w	r3, #0
 8001696:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800169a:	4659      	mov	r1, fp
 800169c:	018b      	lsls	r3, r1, #6
 800169e:	4651      	mov	r1, sl
 80016a0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016a4:	4651      	mov	r1, sl
 80016a6:	018a      	lsls	r2, r1, #6
 80016a8:	4651      	mov	r1, sl
 80016aa:	ebb2 0801 	subs.w	r8, r2, r1
 80016ae:	4659      	mov	r1, fp
 80016b0:	eb63 0901 	sbc.w	r9, r3, r1
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	f04f 0300 	mov.w	r3, #0
 80016bc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016c0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016c4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016c8:	4690      	mov	r8, r2
 80016ca:	4699      	mov	r9, r3
 80016cc:	4623      	mov	r3, r4
 80016ce:	eb18 0303 	adds.w	r3, r8, r3
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	462b      	mov	r3, r5
 80016d6:	eb49 0303 	adc.w	r3, r9, r3
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	f04f 0300 	mov.w	r3, #0
 80016e4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80016e8:	4629      	mov	r1, r5
 80016ea:	024b      	lsls	r3, r1, #9
 80016ec:	4621      	mov	r1, r4
 80016ee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016f2:	4621      	mov	r1, r4
 80016f4:	024a      	lsls	r2, r1, #9
 80016f6:	4610      	mov	r0, r2
 80016f8:	4619      	mov	r1, r3
 80016fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016fe:	2200      	movs	r2, #0
 8001700:	65bb      	str	r3, [r7, #88]	; 0x58
 8001702:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001704:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001708:	f7fe fdd2 	bl	80002b0 <__aeabi_uldivmod>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	4613      	mov	r3, r2
 8001712:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001716:	e065      	b.n	80017e4 <HAL_RCC_GetSysClockFreq+0x420>
 8001718:	40023800 	.word	0x40023800
 800171c:	00f42400 	.word	0x00f42400
 8001720:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001724:	4b3d      	ldr	r3, [pc, #244]	; (800181c <HAL_RCC_GetSysClockFreq+0x458>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	099b      	lsrs	r3, r3, #6
 800172a:	2200      	movs	r2, #0
 800172c:	4618      	mov	r0, r3
 800172e:	4611      	mov	r1, r2
 8001730:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001734:	653b      	str	r3, [r7, #80]	; 0x50
 8001736:	2300      	movs	r3, #0
 8001738:	657b      	str	r3, [r7, #84]	; 0x54
 800173a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800173e:	4642      	mov	r2, r8
 8001740:	464b      	mov	r3, r9
 8001742:	f04f 0000 	mov.w	r0, #0
 8001746:	f04f 0100 	mov.w	r1, #0
 800174a:	0159      	lsls	r1, r3, #5
 800174c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001750:	0150      	lsls	r0, r2, #5
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	4641      	mov	r1, r8
 8001758:	1a51      	subs	r1, r2, r1
 800175a:	60b9      	str	r1, [r7, #8]
 800175c:	4649      	mov	r1, r9
 800175e:	eb63 0301 	sbc.w	r3, r3, r1
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	f04f 0300 	mov.w	r3, #0
 800176c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001770:	4659      	mov	r1, fp
 8001772:	018b      	lsls	r3, r1, #6
 8001774:	4651      	mov	r1, sl
 8001776:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800177a:	4651      	mov	r1, sl
 800177c:	018a      	lsls	r2, r1, #6
 800177e:	4651      	mov	r1, sl
 8001780:	1a54      	subs	r4, r2, r1
 8001782:	4659      	mov	r1, fp
 8001784:	eb63 0501 	sbc.w	r5, r3, r1
 8001788:	f04f 0200 	mov.w	r2, #0
 800178c:	f04f 0300 	mov.w	r3, #0
 8001790:	00eb      	lsls	r3, r5, #3
 8001792:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001796:	00e2      	lsls	r2, r4, #3
 8001798:	4614      	mov	r4, r2
 800179a:	461d      	mov	r5, r3
 800179c:	4643      	mov	r3, r8
 800179e:	18e3      	adds	r3, r4, r3
 80017a0:	603b      	str	r3, [r7, #0]
 80017a2:	464b      	mov	r3, r9
 80017a4:	eb45 0303 	adc.w	r3, r5, r3
 80017a8:	607b      	str	r3, [r7, #4]
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	f04f 0300 	mov.w	r3, #0
 80017b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017b6:	4629      	mov	r1, r5
 80017b8:	028b      	lsls	r3, r1, #10
 80017ba:	4621      	mov	r1, r4
 80017bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017c0:	4621      	mov	r1, r4
 80017c2:	028a      	lsls	r2, r1, #10
 80017c4:	4610      	mov	r0, r2
 80017c6:	4619      	mov	r1, r3
 80017c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017cc:	2200      	movs	r2, #0
 80017ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80017d0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80017d2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80017d6:	f7fe fd6b 	bl	80002b0 <__aeabi_uldivmod>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4613      	mov	r3, r2
 80017e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80017e4:	4b0d      	ldr	r3, [pc, #52]	; (800181c <HAL_RCC_GetSysClockFreq+0x458>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	0f1b      	lsrs	r3, r3, #28
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80017f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80017f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80017fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001802:	e003      	b.n	800180c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001806:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800180a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800180c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001810:	4618      	mov	r0, r3
 8001812:	37b8      	adds	r7, #184	; 0xb8
 8001814:	46bd      	mov	sp, r7
 8001816:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800181a:	bf00      	nop
 800181c:	40023800 	.word	0x40023800
 8001820:	00f42400 	.word	0x00f42400

08001824 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e28d      	b.n	8001d52 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b00      	cmp	r3, #0
 8001840:	f000 8083 	beq.w	800194a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001844:	4b94      	ldr	r3, [pc, #592]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f003 030c 	and.w	r3, r3, #12
 800184c:	2b04      	cmp	r3, #4
 800184e:	d019      	beq.n	8001884 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001850:	4b91      	ldr	r3, [pc, #580]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001858:	2b08      	cmp	r3, #8
 800185a:	d106      	bne.n	800186a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800185c:	4b8e      	ldr	r3, [pc, #568]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001864:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001868:	d00c      	beq.n	8001884 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800186a:	4b8b      	ldr	r3, [pc, #556]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001872:	2b0c      	cmp	r3, #12
 8001874:	d112      	bne.n	800189c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001876:	4b88      	ldr	r3, [pc, #544]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800187e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001882:	d10b      	bne.n	800189c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001884:	4b84      	ldr	r3, [pc, #528]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d05b      	beq.n	8001948 <HAL_RCC_OscConfig+0x124>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d157      	bne.n	8001948 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e25a      	b.n	8001d52 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018a4:	d106      	bne.n	80018b4 <HAL_RCC_OscConfig+0x90>
 80018a6:	4b7c      	ldr	r3, [pc, #496]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a7b      	ldr	r2, [pc, #492]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 80018ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	e01d      	b.n	80018f0 <HAL_RCC_OscConfig+0xcc>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018bc:	d10c      	bne.n	80018d8 <HAL_RCC_OscConfig+0xb4>
 80018be:	4b76      	ldr	r3, [pc, #472]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a75      	ldr	r2, [pc, #468]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 80018c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	4b73      	ldr	r3, [pc, #460]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a72      	ldr	r2, [pc, #456]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 80018d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	e00b      	b.n	80018f0 <HAL_RCC_OscConfig+0xcc>
 80018d8:	4b6f      	ldr	r3, [pc, #444]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a6e      	ldr	r2, [pc, #440]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 80018de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018e2:	6013      	str	r3, [r2, #0]
 80018e4:	4b6c      	ldr	r3, [pc, #432]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a6b      	ldr	r2, [pc, #428]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 80018ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d013      	beq.n	8001920 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f8:	f7ff f986 	bl	8000c08 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001900:	f7ff f982 	bl	8000c08 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b64      	cmp	r3, #100	; 0x64
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e21f      	b.n	8001d52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001912:	4b61      	ldr	r3, [pc, #388]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d0f0      	beq.n	8001900 <HAL_RCC_OscConfig+0xdc>
 800191e:	e014      	b.n	800194a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001920:	f7ff f972 	bl	8000c08 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001928:	f7ff f96e 	bl	8000c08 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b64      	cmp	r3, #100	; 0x64
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e20b      	b.n	8001d52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800193a:	4b57      	ldr	r3, [pc, #348]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f0      	bne.n	8001928 <HAL_RCC_OscConfig+0x104>
 8001946:	e000      	b.n	800194a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001948:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d06f      	beq.n	8001a36 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001956:	4b50      	ldr	r3, [pc, #320]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 030c 	and.w	r3, r3, #12
 800195e:	2b00      	cmp	r3, #0
 8001960:	d017      	beq.n	8001992 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001962:	4b4d      	ldr	r3, [pc, #308]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800196a:	2b08      	cmp	r3, #8
 800196c:	d105      	bne.n	800197a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800196e:	4b4a      	ldr	r3, [pc, #296]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d00b      	beq.n	8001992 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800197a:	4b47      	ldr	r3, [pc, #284]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001982:	2b0c      	cmp	r3, #12
 8001984:	d11c      	bne.n	80019c0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001986:	4b44      	ldr	r3, [pc, #272]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d116      	bne.n	80019c0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001992:	4b41      	ldr	r3, [pc, #260]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d005      	beq.n	80019aa <HAL_RCC_OscConfig+0x186>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d001      	beq.n	80019aa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e1d3      	b.n	8001d52 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019aa:	4b3b      	ldr	r3, [pc, #236]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	4937      	ldr	r1, [pc, #220]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019be:	e03a      	b.n	8001a36 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d020      	beq.n	8001a0a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019c8:	4b34      	ldr	r3, [pc, #208]	; (8001a9c <HAL_RCC_OscConfig+0x278>)
 80019ca:	2201      	movs	r2, #1
 80019cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ce:	f7ff f91b 	bl	8000c08 <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019d6:	f7ff f917 	bl	8000c08 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e1b4      	b.n	8001d52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e8:	4b2b      	ldr	r3, [pc, #172]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0f0      	beq.n	80019d6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f4:	4b28      	ldr	r3, [pc, #160]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	4925      	ldr	r1, [pc, #148]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	600b      	str	r3, [r1, #0]
 8001a08:	e015      	b.n	8001a36 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a0a:	4b24      	ldr	r3, [pc, #144]	; (8001a9c <HAL_RCC_OscConfig+0x278>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a10:	f7ff f8fa 	bl	8000c08 <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a18:	f7ff f8f6 	bl	8000c08 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e193      	b.n	8001d52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a2a:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1f0      	bne.n	8001a18 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d036      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d016      	beq.n	8001a78 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <HAL_RCC_OscConfig+0x27c>)
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a50:	f7ff f8da 	bl	8000c08 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a58:	f7ff f8d6 	bl	8000c08 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e173      	b.n	8001d52 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a6a:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 8001a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d0f0      	beq.n	8001a58 <HAL_RCC_OscConfig+0x234>
 8001a76:	e01b      	b.n	8001ab0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a78:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <HAL_RCC_OscConfig+0x27c>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a7e:	f7ff f8c3 	bl	8000c08 <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a84:	e00e      	b.n	8001aa4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a86:	f7ff f8bf 	bl	8000c08 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d907      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e15c      	b.n	8001d52 <HAL_RCC_OscConfig+0x52e>
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	42470000 	.word	0x42470000
 8001aa0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aa4:	4b8a      	ldr	r3, [pc, #552]	; (8001cd0 <HAL_RCC_OscConfig+0x4ac>)
 8001aa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1ea      	bne.n	8001a86 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f000 8097 	beq.w	8001bec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ac2:	4b83      	ldr	r3, [pc, #524]	; (8001cd0 <HAL_RCC_OscConfig+0x4ac>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d10f      	bne.n	8001aee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	4b7f      	ldr	r3, [pc, #508]	; (8001cd0 <HAL_RCC_OscConfig+0x4ac>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	4a7e      	ldr	r2, [pc, #504]	; (8001cd0 <HAL_RCC_OscConfig+0x4ac>)
 8001ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001adc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ade:	4b7c      	ldr	r3, [pc, #496]	; (8001cd0 <HAL_RCC_OscConfig+0x4ac>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae6:	60bb      	str	r3, [r7, #8]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aea:	2301      	movs	r3, #1
 8001aec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aee:	4b79      	ldr	r3, [pc, #484]	; (8001cd4 <HAL_RCC_OscConfig+0x4b0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d118      	bne.n	8001b2c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001afa:	4b76      	ldr	r3, [pc, #472]	; (8001cd4 <HAL_RCC_OscConfig+0x4b0>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a75      	ldr	r2, [pc, #468]	; (8001cd4 <HAL_RCC_OscConfig+0x4b0>)
 8001b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b06:	f7ff f87f 	bl	8000c08 <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b0c:	e008      	b.n	8001b20 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b0e:	f7ff f87b 	bl	8000c08 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e118      	b.n	8001d52 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b20:	4b6c      	ldr	r3, [pc, #432]	; (8001cd4 <HAL_RCC_OscConfig+0x4b0>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0f0      	beq.n	8001b0e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d106      	bne.n	8001b42 <HAL_RCC_OscConfig+0x31e>
 8001b34:	4b66      	ldr	r3, [pc, #408]	; (8001cd0 <HAL_RCC_OscConfig+0x4ac>)
 8001b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b38:	4a65      	ldr	r2, [pc, #404]	; (8001cd0 <HAL_RCC_OscConfig+0x4ac>)
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b40:	e01c      	b.n	8001b7c <HAL_RCC_OscConfig+0x358>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2b05      	cmp	r3, #5
 8001b48:	d10c      	bne.n	8001b64 <HAL_RCC_OscConfig+0x340>
 8001b4a:	4b61      	ldr	r3, [pc, #388]	; (8001cd0 <HAL_RCC_OscConfig+0x4ac>)
 8001b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b4e:	4a60      	ldr	r2, [pc, #384]	; (8001cd0 <HAL_RCC_OscConfig+0x4ac>)
 8001b50:	f043 0304 	orr.w	r3, r3, #4
 8001b54:	6713      	str	r3, [r2, #112]	; 0x70
 8001b56:	4b5e      	ldr	r3, [pc, #376]	; (8001cd0 <HAL_RCC_OscConfig+0x4ac>)
 8001b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5a:	4a5d      	ldr	r2, [pc, #372]	; (8001cd0 <HAL_RCC_OscConfig+0x4ac>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	6713      	str	r3, [r2, #112]	; 0x70
 8001b62:	e00b      	b.n	8001b7c <HAL_RCC_OscConfig+0x358>
 8001b64:	4b5a      	ldr	r3, [pc, #360]	; (8001cd0 <HAL_RCC_OscConfig+0x4ac>)
 8001b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b68:	4a59      	ldr	r2, [pc, #356]	; (8001cd0 <HAL_RCC_OscConfig+0x4ac>)
 8001b6a:	f023 0301 	bic.w	r3, r3, #1
 8001b6e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b70:	4b57      	ldr	r3, [pc, #348]	; (8001cd0 <HAL_RCC_OscConfig+0x4ac>)
 8001b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b74:	4a56      	ldr	r2, [pc, #344]	; (8001cd0 <HAL_RCC_OscConfig+0x4ac>)
 8001b76:	f023 0304 	bic.w	r3, r3, #4
 8001b7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d015      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b84:	f7ff f840 	bl	8000c08 <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b8a:	e00a      	b.n	8001ba2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b8c:	f7ff f83c 	bl	8000c08 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e0d7      	b.n	8001d52 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba2:	4b4b      	ldr	r3, [pc, #300]	; (8001cd0 <HAL_RCC_OscConfig+0x4ac>)
 8001ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d0ee      	beq.n	8001b8c <HAL_RCC_OscConfig+0x368>
 8001bae:	e014      	b.n	8001bda <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb0:	f7ff f82a 	bl	8000c08 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb6:	e00a      	b.n	8001bce <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bb8:	f7ff f826 	bl	8000c08 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e0c1      	b.n	8001d52 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bce:	4b40      	ldr	r3, [pc, #256]	; (8001cd0 <HAL_RCC_OscConfig+0x4ac>)
 8001bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1ee      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bda:	7dfb      	ldrb	r3, [r7, #23]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d105      	bne.n	8001bec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be0:	4b3b      	ldr	r3, [pc, #236]	; (8001cd0 <HAL_RCC_OscConfig+0x4ac>)
 8001be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be4:	4a3a      	ldr	r2, [pc, #232]	; (8001cd0 <HAL_RCC_OscConfig+0x4ac>)
 8001be6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 80ad 	beq.w	8001d50 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bf6:	4b36      	ldr	r3, [pc, #216]	; (8001cd0 <HAL_RCC_OscConfig+0x4ac>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f003 030c 	and.w	r3, r3, #12
 8001bfe:	2b08      	cmp	r3, #8
 8001c00:	d060      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d145      	bne.n	8001c96 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c0a:	4b33      	ldr	r3, [pc, #204]	; (8001cd8 <HAL_RCC_OscConfig+0x4b4>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c10:	f7fe fffa 	bl	8000c08 <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c18:	f7fe fff6 	bl	8000c08 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e093      	b.n	8001d52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c2a:	4b29      	ldr	r3, [pc, #164]	; (8001cd0 <HAL_RCC_OscConfig+0x4ac>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1f0      	bne.n	8001c18 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	69da      	ldr	r2, [r3, #28]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c44:	019b      	lsls	r3, r3, #6
 8001c46:	431a      	orrs	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4c:	085b      	lsrs	r3, r3, #1
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	041b      	lsls	r3, r3, #16
 8001c52:	431a      	orrs	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c58:	061b      	lsls	r3, r3, #24
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c60:	071b      	lsls	r3, r3, #28
 8001c62:	491b      	ldr	r1, [pc, #108]	; (8001cd0 <HAL_RCC_OscConfig+0x4ac>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c68:	4b1b      	ldr	r3, [pc, #108]	; (8001cd8 <HAL_RCC_OscConfig+0x4b4>)
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c6e:	f7fe ffcb 	bl	8000c08 <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c76:	f7fe ffc7 	bl	8000c08 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e064      	b.n	8001d52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c88:	4b11      	ldr	r3, [pc, #68]	; (8001cd0 <HAL_RCC_OscConfig+0x4ac>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0f0      	beq.n	8001c76 <HAL_RCC_OscConfig+0x452>
 8001c94:	e05c      	b.n	8001d50 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c96:	4b10      	ldr	r3, [pc, #64]	; (8001cd8 <HAL_RCC_OscConfig+0x4b4>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9c:	f7fe ffb4 	bl	8000c08 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ca4:	f7fe ffb0 	bl	8000c08 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e04d      	b.n	8001d52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cb6:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <HAL_RCC_OscConfig+0x4ac>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f0      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x480>
 8001cc2:	e045      	b.n	8001d50 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d107      	bne.n	8001cdc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e040      	b.n	8001d52 <HAL_RCC_OscConfig+0x52e>
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40007000 	.word	0x40007000
 8001cd8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cdc:	4b1f      	ldr	r3, [pc, #124]	; (8001d5c <HAL_RCC_OscConfig+0x538>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d030      	beq.n	8001d4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d129      	bne.n	8001d4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d122      	bne.n	8001d4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d119      	bne.n	8001d4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d22:	085b      	lsrs	r3, r3, #1
 8001d24:	3b01      	subs	r3, #1
 8001d26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d10f      	bne.n	8001d4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d107      	bne.n	8001d4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d001      	beq.n	8001d50 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e000      	b.n	8001d52 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40023800 	.word	0x40023800

08001d60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e03f      	b.n	8001df2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d106      	bne.n	8001d8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7fe fd86 	bl	8000898 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2224      	movs	r2, #36	; 0x24
 8001d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68da      	ldr	r2, [r3, #12]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001da2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 f929 	bl	8001ffc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	691a      	ldr	r2, [r3, #16]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001db8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	695a      	ldr	r2, [r3, #20]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001dc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68da      	ldr	r2, [r3, #12]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001dd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2220      	movs	r2, #32
 8001de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2220      	movs	r2, #32
 8001dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b08a      	sub	sp, #40	; 0x28
 8001dfe:	af02      	add	r7, sp, #8
 8001e00:	60f8      	str	r0, [r7, #12]
 8001e02:	60b9      	str	r1, [r7, #8]
 8001e04:	603b      	str	r3, [r7, #0]
 8001e06:	4613      	mov	r3, r2
 8001e08:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b20      	cmp	r3, #32
 8001e18:	d17c      	bne.n	8001f14 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d002      	beq.n	8001e26 <HAL_UART_Transmit+0x2c>
 8001e20:	88fb      	ldrh	r3, [r7, #6]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e075      	b.n	8001f16 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d101      	bne.n	8001e38 <HAL_UART_Transmit+0x3e>
 8001e34:	2302      	movs	r3, #2
 8001e36:	e06e      	b.n	8001f16 <HAL_UART_Transmit+0x11c>
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2200      	movs	r2, #0
 8001e44:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2221      	movs	r2, #33	; 0x21
 8001e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e4e:	f7fe fedb 	bl	8000c08 <HAL_GetTick>
 8001e52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	88fa      	ldrh	r2, [r7, #6]
 8001e58:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	88fa      	ldrh	r2, [r7, #6]
 8001e5e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e68:	d108      	bne.n	8001e7c <HAL_UART_Transmit+0x82>
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d104      	bne.n	8001e7c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	61bb      	str	r3, [r7, #24]
 8001e7a:	e003      	b.n	8001e84 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001e8c:	e02a      	b.n	8001ee4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	2200      	movs	r2, #0
 8001e96:	2180      	movs	r1, #128	; 0x80
 8001e98:	68f8      	ldr	r0, [r7, #12]
 8001e9a:	f000 f840 	bl	8001f1e <UART_WaitOnFlagUntilTimeout>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e036      	b.n	8001f16 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d10b      	bne.n	8001ec6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ebc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	3302      	adds	r3, #2
 8001ec2:	61bb      	str	r3, [r7, #24]
 8001ec4:	e007      	b.n	8001ed6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	781a      	ldrb	r2, [r3, #0]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	3b01      	subs	r3, #1
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1cf      	bne.n	8001e8e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2140      	movs	r1, #64	; 0x40
 8001ef8:	68f8      	ldr	r0, [r7, #12]
 8001efa:	f000 f810 	bl	8001f1e <UART_WaitOnFlagUntilTimeout>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e006      	b.n	8001f16 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2220      	movs	r2, #32
 8001f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001f10:	2300      	movs	r3, #0
 8001f12:	e000      	b.n	8001f16 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001f14:	2302      	movs	r3, #2
  }
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3720      	adds	r7, #32
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b090      	sub	sp, #64	; 0x40
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	60f8      	str	r0, [r7, #12]
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	603b      	str	r3, [r7, #0]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f2e:	e050      	b.n	8001fd2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f36:	d04c      	beq.n	8001fd2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d007      	beq.n	8001f4e <UART_WaitOnFlagUntilTimeout+0x30>
 8001f3e:	f7fe fe63 	bl	8000c08 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d241      	bcs.n	8001fd2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	330c      	adds	r3, #12
 8001f54:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f58:	e853 3f00 	ldrex	r3, [r3]
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001f64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	330c      	adds	r3, #12
 8001f6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f6e:	637a      	str	r2, [r7, #52]	; 0x34
 8001f70:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f76:	e841 2300 	strex	r3, r2, [r1]
 8001f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1e5      	bne.n	8001f4e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	3314      	adds	r3, #20
 8001f88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	e853 3f00 	ldrex	r3, [r3]
 8001f90:	613b      	str	r3, [r7, #16]
   return(result);
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	f023 0301 	bic.w	r3, r3, #1
 8001f98:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	3314      	adds	r3, #20
 8001fa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fa2:	623a      	str	r2, [r7, #32]
 8001fa4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fa6:	69f9      	ldr	r1, [r7, #28]
 8001fa8:	6a3a      	ldr	r2, [r7, #32]
 8001faa:	e841 2300 	strex	r3, r2, [r1]
 8001fae:	61bb      	str	r3, [r7, #24]
   return(result);
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1e5      	bne.n	8001f82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2220      	movs	r2, #32
 8001fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2220      	movs	r2, #32
 8001fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e00f      	b.n	8001ff2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	68ba      	ldr	r2, [r7, #8]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	bf0c      	ite	eq
 8001fe2:	2301      	moveq	r3, #1
 8001fe4:	2300      	movne	r3, #0
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	461a      	mov	r2, r3
 8001fea:	79fb      	ldrb	r3, [r7, #7]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d09f      	beq.n	8001f30 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3740      	adds	r7, #64	; 0x40
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
	...

08001ffc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ffc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002000:	b0c0      	sub	sp, #256	; 0x100
 8002002:	af00      	add	r7, sp, #0
 8002004:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002018:	68d9      	ldr	r1, [r3, #12]
 800201a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	ea40 0301 	orr.w	r3, r0, r1
 8002024:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	431a      	orrs	r2, r3
 8002034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	431a      	orrs	r2, r3
 800203c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	4313      	orrs	r3, r2
 8002044:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002054:	f021 010c 	bic.w	r1, r1, #12
 8002058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002062:	430b      	orrs	r3, r1
 8002064:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002076:	6999      	ldr	r1, [r3, #24]
 8002078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	ea40 0301 	orr.w	r3, r0, r1
 8002082:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	4b8f      	ldr	r3, [pc, #572]	; (80022c8 <UART_SetConfig+0x2cc>)
 800208c:	429a      	cmp	r2, r3
 800208e:	d005      	beq.n	800209c <UART_SetConfig+0xa0>
 8002090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	4b8d      	ldr	r3, [pc, #564]	; (80022cc <UART_SetConfig+0x2d0>)
 8002098:	429a      	cmp	r2, r3
 800209a:	d104      	bne.n	80020a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800209c:	f7ff f97e 	bl	800139c <HAL_RCC_GetPCLK2Freq>
 80020a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80020a4:	e003      	b.n	80020ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80020a6:	f7ff f965 	bl	8001374 <HAL_RCC_GetPCLK1Freq>
 80020aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020b2:	69db      	ldr	r3, [r3, #28]
 80020b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020b8:	f040 810c 	bne.w	80022d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80020bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020c0:	2200      	movs	r2, #0
 80020c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80020c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80020ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80020ce:	4622      	mov	r2, r4
 80020d0:	462b      	mov	r3, r5
 80020d2:	1891      	adds	r1, r2, r2
 80020d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80020d6:	415b      	adcs	r3, r3
 80020d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80020da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80020de:	4621      	mov	r1, r4
 80020e0:	eb12 0801 	adds.w	r8, r2, r1
 80020e4:	4629      	mov	r1, r5
 80020e6:	eb43 0901 	adc.w	r9, r3, r1
 80020ea:	f04f 0200 	mov.w	r2, #0
 80020ee:	f04f 0300 	mov.w	r3, #0
 80020f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020fe:	4690      	mov	r8, r2
 8002100:	4699      	mov	r9, r3
 8002102:	4623      	mov	r3, r4
 8002104:	eb18 0303 	adds.w	r3, r8, r3
 8002108:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800210c:	462b      	mov	r3, r5
 800210e:	eb49 0303 	adc.w	r3, r9, r3
 8002112:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002122:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002126:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800212a:	460b      	mov	r3, r1
 800212c:	18db      	adds	r3, r3, r3
 800212e:	653b      	str	r3, [r7, #80]	; 0x50
 8002130:	4613      	mov	r3, r2
 8002132:	eb42 0303 	adc.w	r3, r2, r3
 8002136:	657b      	str	r3, [r7, #84]	; 0x54
 8002138:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800213c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002140:	f7fe f8b6 	bl	80002b0 <__aeabi_uldivmod>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4b61      	ldr	r3, [pc, #388]	; (80022d0 <UART_SetConfig+0x2d4>)
 800214a:	fba3 2302 	umull	r2, r3, r3, r2
 800214e:	095b      	lsrs	r3, r3, #5
 8002150:	011c      	lsls	r4, r3, #4
 8002152:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002156:	2200      	movs	r2, #0
 8002158:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800215c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002160:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002164:	4642      	mov	r2, r8
 8002166:	464b      	mov	r3, r9
 8002168:	1891      	adds	r1, r2, r2
 800216a:	64b9      	str	r1, [r7, #72]	; 0x48
 800216c:	415b      	adcs	r3, r3
 800216e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002170:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002174:	4641      	mov	r1, r8
 8002176:	eb12 0a01 	adds.w	sl, r2, r1
 800217a:	4649      	mov	r1, r9
 800217c:	eb43 0b01 	adc.w	fp, r3, r1
 8002180:	f04f 0200 	mov.w	r2, #0
 8002184:	f04f 0300 	mov.w	r3, #0
 8002188:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800218c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002190:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002194:	4692      	mov	sl, r2
 8002196:	469b      	mov	fp, r3
 8002198:	4643      	mov	r3, r8
 800219a:	eb1a 0303 	adds.w	r3, sl, r3
 800219e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80021a2:	464b      	mov	r3, r9
 80021a4:	eb4b 0303 	adc.w	r3, fp, r3
 80021a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80021ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80021b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80021bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80021c0:	460b      	mov	r3, r1
 80021c2:	18db      	adds	r3, r3, r3
 80021c4:	643b      	str	r3, [r7, #64]	; 0x40
 80021c6:	4613      	mov	r3, r2
 80021c8:	eb42 0303 	adc.w	r3, r2, r3
 80021cc:	647b      	str	r3, [r7, #68]	; 0x44
 80021ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80021d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80021d6:	f7fe f86b 	bl	80002b0 <__aeabi_uldivmod>
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	4611      	mov	r1, r2
 80021e0:	4b3b      	ldr	r3, [pc, #236]	; (80022d0 <UART_SetConfig+0x2d4>)
 80021e2:	fba3 2301 	umull	r2, r3, r3, r1
 80021e6:	095b      	lsrs	r3, r3, #5
 80021e8:	2264      	movs	r2, #100	; 0x64
 80021ea:	fb02 f303 	mul.w	r3, r2, r3
 80021ee:	1acb      	subs	r3, r1, r3
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80021f6:	4b36      	ldr	r3, [pc, #216]	; (80022d0 <UART_SetConfig+0x2d4>)
 80021f8:	fba3 2302 	umull	r2, r3, r3, r2
 80021fc:	095b      	lsrs	r3, r3, #5
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002204:	441c      	add	r4, r3
 8002206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800220a:	2200      	movs	r2, #0
 800220c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002210:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002214:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002218:	4642      	mov	r2, r8
 800221a:	464b      	mov	r3, r9
 800221c:	1891      	adds	r1, r2, r2
 800221e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002220:	415b      	adcs	r3, r3
 8002222:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002224:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002228:	4641      	mov	r1, r8
 800222a:	1851      	adds	r1, r2, r1
 800222c:	6339      	str	r1, [r7, #48]	; 0x30
 800222e:	4649      	mov	r1, r9
 8002230:	414b      	adcs	r3, r1
 8002232:	637b      	str	r3, [r7, #52]	; 0x34
 8002234:	f04f 0200 	mov.w	r2, #0
 8002238:	f04f 0300 	mov.w	r3, #0
 800223c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002240:	4659      	mov	r1, fp
 8002242:	00cb      	lsls	r3, r1, #3
 8002244:	4651      	mov	r1, sl
 8002246:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800224a:	4651      	mov	r1, sl
 800224c:	00ca      	lsls	r2, r1, #3
 800224e:	4610      	mov	r0, r2
 8002250:	4619      	mov	r1, r3
 8002252:	4603      	mov	r3, r0
 8002254:	4642      	mov	r2, r8
 8002256:	189b      	adds	r3, r3, r2
 8002258:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800225c:	464b      	mov	r3, r9
 800225e:	460a      	mov	r2, r1
 8002260:	eb42 0303 	adc.w	r3, r2, r3
 8002264:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002274:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002278:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800227c:	460b      	mov	r3, r1
 800227e:	18db      	adds	r3, r3, r3
 8002280:	62bb      	str	r3, [r7, #40]	; 0x28
 8002282:	4613      	mov	r3, r2
 8002284:	eb42 0303 	adc.w	r3, r2, r3
 8002288:	62fb      	str	r3, [r7, #44]	; 0x2c
 800228a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800228e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002292:	f7fe f80d 	bl	80002b0 <__aeabi_uldivmod>
 8002296:	4602      	mov	r2, r0
 8002298:	460b      	mov	r3, r1
 800229a:	4b0d      	ldr	r3, [pc, #52]	; (80022d0 <UART_SetConfig+0x2d4>)
 800229c:	fba3 1302 	umull	r1, r3, r3, r2
 80022a0:	095b      	lsrs	r3, r3, #5
 80022a2:	2164      	movs	r1, #100	; 0x64
 80022a4:	fb01 f303 	mul.w	r3, r1, r3
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	3332      	adds	r3, #50	; 0x32
 80022ae:	4a08      	ldr	r2, [pc, #32]	; (80022d0 <UART_SetConfig+0x2d4>)
 80022b0:	fba2 2303 	umull	r2, r3, r2, r3
 80022b4:	095b      	lsrs	r3, r3, #5
 80022b6:	f003 0207 	and.w	r2, r3, #7
 80022ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4422      	add	r2, r4
 80022c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80022c4:	e105      	b.n	80024d2 <UART_SetConfig+0x4d6>
 80022c6:	bf00      	nop
 80022c8:	40011000 	.word	0x40011000
 80022cc:	40011400 	.word	0x40011400
 80022d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022d8:	2200      	movs	r2, #0
 80022da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80022de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80022e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80022e6:	4642      	mov	r2, r8
 80022e8:	464b      	mov	r3, r9
 80022ea:	1891      	adds	r1, r2, r2
 80022ec:	6239      	str	r1, [r7, #32]
 80022ee:	415b      	adcs	r3, r3
 80022f0:	627b      	str	r3, [r7, #36]	; 0x24
 80022f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80022f6:	4641      	mov	r1, r8
 80022f8:	1854      	adds	r4, r2, r1
 80022fa:	4649      	mov	r1, r9
 80022fc:	eb43 0501 	adc.w	r5, r3, r1
 8002300:	f04f 0200 	mov.w	r2, #0
 8002304:	f04f 0300 	mov.w	r3, #0
 8002308:	00eb      	lsls	r3, r5, #3
 800230a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800230e:	00e2      	lsls	r2, r4, #3
 8002310:	4614      	mov	r4, r2
 8002312:	461d      	mov	r5, r3
 8002314:	4643      	mov	r3, r8
 8002316:	18e3      	adds	r3, r4, r3
 8002318:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800231c:	464b      	mov	r3, r9
 800231e:	eb45 0303 	adc.w	r3, r5, r3
 8002322:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002332:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002336:	f04f 0200 	mov.w	r2, #0
 800233a:	f04f 0300 	mov.w	r3, #0
 800233e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002342:	4629      	mov	r1, r5
 8002344:	008b      	lsls	r3, r1, #2
 8002346:	4621      	mov	r1, r4
 8002348:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800234c:	4621      	mov	r1, r4
 800234e:	008a      	lsls	r2, r1, #2
 8002350:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002354:	f7fd ffac 	bl	80002b0 <__aeabi_uldivmod>
 8002358:	4602      	mov	r2, r0
 800235a:	460b      	mov	r3, r1
 800235c:	4b60      	ldr	r3, [pc, #384]	; (80024e0 <UART_SetConfig+0x4e4>)
 800235e:	fba3 2302 	umull	r2, r3, r3, r2
 8002362:	095b      	lsrs	r3, r3, #5
 8002364:	011c      	lsls	r4, r3, #4
 8002366:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800236a:	2200      	movs	r2, #0
 800236c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002370:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002374:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002378:	4642      	mov	r2, r8
 800237a:	464b      	mov	r3, r9
 800237c:	1891      	adds	r1, r2, r2
 800237e:	61b9      	str	r1, [r7, #24]
 8002380:	415b      	adcs	r3, r3
 8002382:	61fb      	str	r3, [r7, #28]
 8002384:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002388:	4641      	mov	r1, r8
 800238a:	1851      	adds	r1, r2, r1
 800238c:	6139      	str	r1, [r7, #16]
 800238e:	4649      	mov	r1, r9
 8002390:	414b      	adcs	r3, r1
 8002392:	617b      	str	r3, [r7, #20]
 8002394:	f04f 0200 	mov.w	r2, #0
 8002398:	f04f 0300 	mov.w	r3, #0
 800239c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80023a0:	4659      	mov	r1, fp
 80023a2:	00cb      	lsls	r3, r1, #3
 80023a4:	4651      	mov	r1, sl
 80023a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023aa:	4651      	mov	r1, sl
 80023ac:	00ca      	lsls	r2, r1, #3
 80023ae:	4610      	mov	r0, r2
 80023b0:	4619      	mov	r1, r3
 80023b2:	4603      	mov	r3, r0
 80023b4:	4642      	mov	r2, r8
 80023b6:	189b      	adds	r3, r3, r2
 80023b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80023bc:	464b      	mov	r3, r9
 80023be:	460a      	mov	r2, r1
 80023c0:	eb42 0303 	adc.w	r3, r2, r3
 80023c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80023c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80023d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80023d4:	f04f 0200 	mov.w	r2, #0
 80023d8:	f04f 0300 	mov.w	r3, #0
 80023dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80023e0:	4649      	mov	r1, r9
 80023e2:	008b      	lsls	r3, r1, #2
 80023e4:	4641      	mov	r1, r8
 80023e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023ea:	4641      	mov	r1, r8
 80023ec:	008a      	lsls	r2, r1, #2
 80023ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80023f2:	f7fd ff5d 	bl	80002b0 <__aeabi_uldivmod>
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	4b39      	ldr	r3, [pc, #228]	; (80024e0 <UART_SetConfig+0x4e4>)
 80023fc:	fba3 1302 	umull	r1, r3, r3, r2
 8002400:	095b      	lsrs	r3, r3, #5
 8002402:	2164      	movs	r1, #100	; 0x64
 8002404:	fb01 f303 	mul.w	r3, r1, r3
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	011b      	lsls	r3, r3, #4
 800240c:	3332      	adds	r3, #50	; 0x32
 800240e:	4a34      	ldr	r2, [pc, #208]	; (80024e0 <UART_SetConfig+0x4e4>)
 8002410:	fba2 2303 	umull	r2, r3, r2, r3
 8002414:	095b      	lsrs	r3, r3, #5
 8002416:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800241a:	441c      	add	r4, r3
 800241c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002420:	2200      	movs	r2, #0
 8002422:	673b      	str	r3, [r7, #112]	; 0x70
 8002424:	677a      	str	r2, [r7, #116]	; 0x74
 8002426:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800242a:	4642      	mov	r2, r8
 800242c:	464b      	mov	r3, r9
 800242e:	1891      	adds	r1, r2, r2
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	415b      	adcs	r3, r3
 8002434:	60fb      	str	r3, [r7, #12]
 8002436:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800243a:	4641      	mov	r1, r8
 800243c:	1851      	adds	r1, r2, r1
 800243e:	6039      	str	r1, [r7, #0]
 8002440:	4649      	mov	r1, r9
 8002442:	414b      	adcs	r3, r1
 8002444:	607b      	str	r3, [r7, #4]
 8002446:	f04f 0200 	mov.w	r2, #0
 800244a:	f04f 0300 	mov.w	r3, #0
 800244e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002452:	4659      	mov	r1, fp
 8002454:	00cb      	lsls	r3, r1, #3
 8002456:	4651      	mov	r1, sl
 8002458:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800245c:	4651      	mov	r1, sl
 800245e:	00ca      	lsls	r2, r1, #3
 8002460:	4610      	mov	r0, r2
 8002462:	4619      	mov	r1, r3
 8002464:	4603      	mov	r3, r0
 8002466:	4642      	mov	r2, r8
 8002468:	189b      	adds	r3, r3, r2
 800246a:	66bb      	str	r3, [r7, #104]	; 0x68
 800246c:	464b      	mov	r3, r9
 800246e:	460a      	mov	r2, r1
 8002470:	eb42 0303 	adc.w	r3, r2, r3
 8002474:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	663b      	str	r3, [r7, #96]	; 0x60
 8002480:	667a      	str	r2, [r7, #100]	; 0x64
 8002482:	f04f 0200 	mov.w	r2, #0
 8002486:	f04f 0300 	mov.w	r3, #0
 800248a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800248e:	4649      	mov	r1, r9
 8002490:	008b      	lsls	r3, r1, #2
 8002492:	4641      	mov	r1, r8
 8002494:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002498:	4641      	mov	r1, r8
 800249a:	008a      	lsls	r2, r1, #2
 800249c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80024a0:	f7fd ff06 	bl	80002b0 <__aeabi_uldivmod>
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	4b0d      	ldr	r3, [pc, #52]	; (80024e0 <UART_SetConfig+0x4e4>)
 80024aa:	fba3 1302 	umull	r1, r3, r3, r2
 80024ae:	095b      	lsrs	r3, r3, #5
 80024b0:	2164      	movs	r1, #100	; 0x64
 80024b2:	fb01 f303 	mul.w	r3, r1, r3
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	011b      	lsls	r3, r3, #4
 80024ba:	3332      	adds	r3, #50	; 0x32
 80024bc:	4a08      	ldr	r2, [pc, #32]	; (80024e0 <UART_SetConfig+0x4e4>)
 80024be:	fba2 2303 	umull	r2, r3, r2, r3
 80024c2:	095b      	lsrs	r3, r3, #5
 80024c4:	f003 020f 	and.w	r2, r3, #15
 80024c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4422      	add	r2, r4
 80024d0:	609a      	str	r2, [r3, #8]
}
 80024d2:	bf00      	nop
 80024d4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80024d8:	46bd      	mov	sp, r7
 80024da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024de:	bf00      	nop
 80024e0:	51eb851f 	.word	0x51eb851f

080024e4 <__errno>:
 80024e4:	4b01      	ldr	r3, [pc, #4]	; (80024ec <__errno+0x8>)
 80024e6:	6818      	ldr	r0, [r3, #0]
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	2000000c 	.word	0x2000000c

080024f0 <__libc_init_array>:
 80024f0:	b570      	push	{r4, r5, r6, lr}
 80024f2:	4d0d      	ldr	r5, [pc, #52]	; (8002528 <__libc_init_array+0x38>)
 80024f4:	4c0d      	ldr	r4, [pc, #52]	; (800252c <__libc_init_array+0x3c>)
 80024f6:	1b64      	subs	r4, r4, r5
 80024f8:	10a4      	asrs	r4, r4, #2
 80024fa:	2600      	movs	r6, #0
 80024fc:	42a6      	cmp	r6, r4
 80024fe:	d109      	bne.n	8002514 <__libc_init_array+0x24>
 8002500:	4d0b      	ldr	r5, [pc, #44]	; (8002530 <__libc_init_array+0x40>)
 8002502:	4c0c      	ldr	r4, [pc, #48]	; (8002534 <__libc_init_array+0x44>)
 8002504:	f000 ffae 	bl	8003464 <_init>
 8002508:	1b64      	subs	r4, r4, r5
 800250a:	10a4      	asrs	r4, r4, #2
 800250c:	2600      	movs	r6, #0
 800250e:	42a6      	cmp	r6, r4
 8002510:	d105      	bne.n	800251e <__libc_init_array+0x2e>
 8002512:	bd70      	pop	{r4, r5, r6, pc}
 8002514:	f855 3b04 	ldr.w	r3, [r5], #4
 8002518:	4798      	blx	r3
 800251a:	3601      	adds	r6, #1
 800251c:	e7ee      	b.n	80024fc <__libc_init_array+0xc>
 800251e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002522:	4798      	blx	r3
 8002524:	3601      	adds	r6, #1
 8002526:	e7f2      	b.n	800250e <__libc_init_array+0x1e>
 8002528:	08003540 	.word	0x08003540
 800252c:	08003540 	.word	0x08003540
 8002530:	08003540 	.word	0x08003540
 8002534:	08003544 	.word	0x08003544

08002538 <memset>:
 8002538:	4402      	add	r2, r0
 800253a:	4603      	mov	r3, r0
 800253c:	4293      	cmp	r3, r2
 800253e:	d100      	bne.n	8002542 <memset+0xa>
 8002540:	4770      	bx	lr
 8002542:	f803 1b01 	strb.w	r1, [r3], #1
 8002546:	e7f9      	b.n	800253c <memset+0x4>

08002548 <iprintf>:
 8002548:	b40f      	push	{r0, r1, r2, r3}
 800254a:	4b0a      	ldr	r3, [pc, #40]	; (8002574 <iprintf+0x2c>)
 800254c:	b513      	push	{r0, r1, r4, lr}
 800254e:	681c      	ldr	r4, [r3, #0]
 8002550:	b124      	cbz	r4, 800255c <iprintf+0x14>
 8002552:	69a3      	ldr	r3, [r4, #24]
 8002554:	b913      	cbnz	r3, 800255c <iprintf+0x14>
 8002556:	4620      	mov	r0, r4
 8002558:	f000 f866 	bl	8002628 <__sinit>
 800255c:	ab05      	add	r3, sp, #20
 800255e:	9a04      	ldr	r2, [sp, #16]
 8002560:	68a1      	ldr	r1, [r4, #8]
 8002562:	9301      	str	r3, [sp, #4]
 8002564:	4620      	mov	r0, r4
 8002566:	f000 f9bd 	bl	80028e4 <_vfiprintf_r>
 800256a:	b002      	add	sp, #8
 800256c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002570:	b004      	add	sp, #16
 8002572:	4770      	bx	lr
 8002574:	2000000c 	.word	0x2000000c

08002578 <std>:
 8002578:	2300      	movs	r3, #0
 800257a:	b510      	push	{r4, lr}
 800257c:	4604      	mov	r4, r0
 800257e:	e9c0 3300 	strd	r3, r3, [r0]
 8002582:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002586:	6083      	str	r3, [r0, #8]
 8002588:	8181      	strh	r1, [r0, #12]
 800258a:	6643      	str	r3, [r0, #100]	; 0x64
 800258c:	81c2      	strh	r2, [r0, #14]
 800258e:	6183      	str	r3, [r0, #24]
 8002590:	4619      	mov	r1, r3
 8002592:	2208      	movs	r2, #8
 8002594:	305c      	adds	r0, #92	; 0x5c
 8002596:	f7ff ffcf 	bl	8002538 <memset>
 800259a:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <std+0x38>)
 800259c:	6263      	str	r3, [r4, #36]	; 0x24
 800259e:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <std+0x3c>)
 80025a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80025a2:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <std+0x40>)
 80025a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80025a6:	4b05      	ldr	r3, [pc, #20]	; (80025bc <std+0x44>)
 80025a8:	6224      	str	r4, [r4, #32]
 80025aa:	6323      	str	r3, [r4, #48]	; 0x30
 80025ac:	bd10      	pop	{r4, pc}
 80025ae:	bf00      	nop
 80025b0:	08002e8d 	.word	0x08002e8d
 80025b4:	08002eaf 	.word	0x08002eaf
 80025b8:	08002ee7 	.word	0x08002ee7
 80025bc:	08002f0b 	.word	0x08002f0b

080025c0 <_cleanup_r>:
 80025c0:	4901      	ldr	r1, [pc, #4]	; (80025c8 <_cleanup_r+0x8>)
 80025c2:	f000 b8af 	b.w	8002724 <_fwalk_reent>
 80025c6:	bf00      	nop
 80025c8:	080031e5 	.word	0x080031e5

080025cc <__sfmoreglue>:
 80025cc:	b570      	push	{r4, r5, r6, lr}
 80025ce:	2268      	movs	r2, #104	; 0x68
 80025d0:	1e4d      	subs	r5, r1, #1
 80025d2:	4355      	muls	r5, r2
 80025d4:	460e      	mov	r6, r1
 80025d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80025da:	f000 f8e5 	bl	80027a8 <_malloc_r>
 80025de:	4604      	mov	r4, r0
 80025e0:	b140      	cbz	r0, 80025f4 <__sfmoreglue+0x28>
 80025e2:	2100      	movs	r1, #0
 80025e4:	e9c0 1600 	strd	r1, r6, [r0]
 80025e8:	300c      	adds	r0, #12
 80025ea:	60a0      	str	r0, [r4, #8]
 80025ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80025f0:	f7ff ffa2 	bl	8002538 <memset>
 80025f4:	4620      	mov	r0, r4
 80025f6:	bd70      	pop	{r4, r5, r6, pc}

080025f8 <__sfp_lock_acquire>:
 80025f8:	4801      	ldr	r0, [pc, #4]	; (8002600 <__sfp_lock_acquire+0x8>)
 80025fa:	f000 b8b3 	b.w	8002764 <__retarget_lock_acquire_recursive>
 80025fe:	bf00      	nop
 8002600:	200000d9 	.word	0x200000d9

08002604 <__sfp_lock_release>:
 8002604:	4801      	ldr	r0, [pc, #4]	; (800260c <__sfp_lock_release+0x8>)
 8002606:	f000 b8ae 	b.w	8002766 <__retarget_lock_release_recursive>
 800260a:	bf00      	nop
 800260c:	200000d9 	.word	0x200000d9

08002610 <__sinit_lock_acquire>:
 8002610:	4801      	ldr	r0, [pc, #4]	; (8002618 <__sinit_lock_acquire+0x8>)
 8002612:	f000 b8a7 	b.w	8002764 <__retarget_lock_acquire_recursive>
 8002616:	bf00      	nop
 8002618:	200000da 	.word	0x200000da

0800261c <__sinit_lock_release>:
 800261c:	4801      	ldr	r0, [pc, #4]	; (8002624 <__sinit_lock_release+0x8>)
 800261e:	f000 b8a2 	b.w	8002766 <__retarget_lock_release_recursive>
 8002622:	bf00      	nop
 8002624:	200000da 	.word	0x200000da

08002628 <__sinit>:
 8002628:	b510      	push	{r4, lr}
 800262a:	4604      	mov	r4, r0
 800262c:	f7ff fff0 	bl	8002610 <__sinit_lock_acquire>
 8002630:	69a3      	ldr	r3, [r4, #24]
 8002632:	b11b      	cbz	r3, 800263c <__sinit+0x14>
 8002634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002638:	f7ff bff0 	b.w	800261c <__sinit_lock_release>
 800263c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002640:	6523      	str	r3, [r4, #80]	; 0x50
 8002642:	4b13      	ldr	r3, [pc, #76]	; (8002690 <__sinit+0x68>)
 8002644:	4a13      	ldr	r2, [pc, #76]	; (8002694 <__sinit+0x6c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	62a2      	str	r2, [r4, #40]	; 0x28
 800264a:	42a3      	cmp	r3, r4
 800264c:	bf04      	itt	eq
 800264e:	2301      	moveq	r3, #1
 8002650:	61a3      	streq	r3, [r4, #24]
 8002652:	4620      	mov	r0, r4
 8002654:	f000 f820 	bl	8002698 <__sfp>
 8002658:	6060      	str	r0, [r4, #4]
 800265a:	4620      	mov	r0, r4
 800265c:	f000 f81c 	bl	8002698 <__sfp>
 8002660:	60a0      	str	r0, [r4, #8]
 8002662:	4620      	mov	r0, r4
 8002664:	f000 f818 	bl	8002698 <__sfp>
 8002668:	2200      	movs	r2, #0
 800266a:	60e0      	str	r0, [r4, #12]
 800266c:	2104      	movs	r1, #4
 800266e:	6860      	ldr	r0, [r4, #4]
 8002670:	f7ff ff82 	bl	8002578 <std>
 8002674:	68a0      	ldr	r0, [r4, #8]
 8002676:	2201      	movs	r2, #1
 8002678:	2109      	movs	r1, #9
 800267a:	f7ff ff7d 	bl	8002578 <std>
 800267e:	68e0      	ldr	r0, [r4, #12]
 8002680:	2202      	movs	r2, #2
 8002682:	2112      	movs	r1, #18
 8002684:	f7ff ff78 	bl	8002578 <std>
 8002688:	2301      	movs	r3, #1
 800268a:	61a3      	str	r3, [r4, #24]
 800268c:	e7d2      	b.n	8002634 <__sinit+0xc>
 800268e:	bf00      	nop
 8002690:	080034a0 	.word	0x080034a0
 8002694:	080025c1 	.word	0x080025c1

08002698 <__sfp>:
 8002698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800269a:	4607      	mov	r7, r0
 800269c:	f7ff ffac 	bl	80025f8 <__sfp_lock_acquire>
 80026a0:	4b1e      	ldr	r3, [pc, #120]	; (800271c <__sfp+0x84>)
 80026a2:	681e      	ldr	r6, [r3, #0]
 80026a4:	69b3      	ldr	r3, [r6, #24]
 80026a6:	b913      	cbnz	r3, 80026ae <__sfp+0x16>
 80026a8:	4630      	mov	r0, r6
 80026aa:	f7ff ffbd 	bl	8002628 <__sinit>
 80026ae:	3648      	adds	r6, #72	; 0x48
 80026b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80026b4:	3b01      	subs	r3, #1
 80026b6:	d503      	bpl.n	80026c0 <__sfp+0x28>
 80026b8:	6833      	ldr	r3, [r6, #0]
 80026ba:	b30b      	cbz	r3, 8002700 <__sfp+0x68>
 80026bc:	6836      	ldr	r6, [r6, #0]
 80026be:	e7f7      	b.n	80026b0 <__sfp+0x18>
 80026c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80026c4:	b9d5      	cbnz	r5, 80026fc <__sfp+0x64>
 80026c6:	4b16      	ldr	r3, [pc, #88]	; (8002720 <__sfp+0x88>)
 80026c8:	60e3      	str	r3, [r4, #12]
 80026ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80026ce:	6665      	str	r5, [r4, #100]	; 0x64
 80026d0:	f000 f847 	bl	8002762 <__retarget_lock_init_recursive>
 80026d4:	f7ff ff96 	bl	8002604 <__sfp_lock_release>
 80026d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80026dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80026e0:	6025      	str	r5, [r4, #0]
 80026e2:	61a5      	str	r5, [r4, #24]
 80026e4:	2208      	movs	r2, #8
 80026e6:	4629      	mov	r1, r5
 80026e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80026ec:	f7ff ff24 	bl	8002538 <memset>
 80026f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80026f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80026f8:	4620      	mov	r0, r4
 80026fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026fc:	3468      	adds	r4, #104	; 0x68
 80026fe:	e7d9      	b.n	80026b4 <__sfp+0x1c>
 8002700:	2104      	movs	r1, #4
 8002702:	4638      	mov	r0, r7
 8002704:	f7ff ff62 	bl	80025cc <__sfmoreglue>
 8002708:	4604      	mov	r4, r0
 800270a:	6030      	str	r0, [r6, #0]
 800270c:	2800      	cmp	r0, #0
 800270e:	d1d5      	bne.n	80026bc <__sfp+0x24>
 8002710:	f7ff ff78 	bl	8002604 <__sfp_lock_release>
 8002714:	230c      	movs	r3, #12
 8002716:	603b      	str	r3, [r7, #0]
 8002718:	e7ee      	b.n	80026f8 <__sfp+0x60>
 800271a:	bf00      	nop
 800271c:	080034a0 	.word	0x080034a0
 8002720:	ffff0001 	.word	0xffff0001

08002724 <_fwalk_reent>:
 8002724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002728:	4606      	mov	r6, r0
 800272a:	4688      	mov	r8, r1
 800272c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002730:	2700      	movs	r7, #0
 8002732:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002736:	f1b9 0901 	subs.w	r9, r9, #1
 800273a:	d505      	bpl.n	8002748 <_fwalk_reent+0x24>
 800273c:	6824      	ldr	r4, [r4, #0]
 800273e:	2c00      	cmp	r4, #0
 8002740:	d1f7      	bne.n	8002732 <_fwalk_reent+0xe>
 8002742:	4638      	mov	r0, r7
 8002744:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002748:	89ab      	ldrh	r3, [r5, #12]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d907      	bls.n	800275e <_fwalk_reent+0x3a>
 800274e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002752:	3301      	adds	r3, #1
 8002754:	d003      	beq.n	800275e <_fwalk_reent+0x3a>
 8002756:	4629      	mov	r1, r5
 8002758:	4630      	mov	r0, r6
 800275a:	47c0      	blx	r8
 800275c:	4307      	orrs	r7, r0
 800275e:	3568      	adds	r5, #104	; 0x68
 8002760:	e7e9      	b.n	8002736 <_fwalk_reent+0x12>

08002762 <__retarget_lock_init_recursive>:
 8002762:	4770      	bx	lr

08002764 <__retarget_lock_acquire_recursive>:
 8002764:	4770      	bx	lr

08002766 <__retarget_lock_release_recursive>:
 8002766:	4770      	bx	lr

08002768 <sbrk_aligned>:
 8002768:	b570      	push	{r4, r5, r6, lr}
 800276a:	4e0e      	ldr	r6, [pc, #56]	; (80027a4 <sbrk_aligned+0x3c>)
 800276c:	460c      	mov	r4, r1
 800276e:	6831      	ldr	r1, [r6, #0]
 8002770:	4605      	mov	r5, r0
 8002772:	b911      	cbnz	r1, 800277a <sbrk_aligned+0x12>
 8002774:	f000 fb7a 	bl	8002e6c <_sbrk_r>
 8002778:	6030      	str	r0, [r6, #0]
 800277a:	4621      	mov	r1, r4
 800277c:	4628      	mov	r0, r5
 800277e:	f000 fb75 	bl	8002e6c <_sbrk_r>
 8002782:	1c43      	adds	r3, r0, #1
 8002784:	d00a      	beq.n	800279c <sbrk_aligned+0x34>
 8002786:	1cc4      	adds	r4, r0, #3
 8002788:	f024 0403 	bic.w	r4, r4, #3
 800278c:	42a0      	cmp	r0, r4
 800278e:	d007      	beq.n	80027a0 <sbrk_aligned+0x38>
 8002790:	1a21      	subs	r1, r4, r0
 8002792:	4628      	mov	r0, r5
 8002794:	f000 fb6a 	bl	8002e6c <_sbrk_r>
 8002798:	3001      	adds	r0, #1
 800279a:	d101      	bne.n	80027a0 <sbrk_aligned+0x38>
 800279c:	f04f 34ff 	mov.w	r4, #4294967295
 80027a0:	4620      	mov	r0, r4
 80027a2:	bd70      	pop	{r4, r5, r6, pc}
 80027a4:	200000e0 	.word	0x200000e0

080027a8 <_malloc_r>:
 80027a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027ac:	1ccd      	adds	r5, r1, #3
 80027ae:	f025 0503 	bic.w	r5, r5, #3
 80027b2:	3508      	adds	r5, #8
 80027b4:	2d0c      	cmp	r5, #12
 80027b6:	bf38      	it	cc
 80027b8:	250c      	movcc	r5, #12
 80027ba:	2d00      	cmp	r5, #0
 80027bc:	4607      	mov	r7, r0
 80027be:	db01      	blt.n	80027c4 <_malloc_r+0x1c>
 80027c0:	42a9      	cmp	r1, r5
 80027c2:	d905      	bls.n	80027d0 <_malloc_r+0x28>
 80027c4:	230c      	movs	r3, #12
 80027c6:	603b      	str	r3, [r7, #0]
 80027c8:	2600      	movs	r6, #0
 80027ca:	4630      	mov	r0, r6
 80027cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027d0:	4e2e      	ldr	r6, [pc, #184]	; (800288c <_malloc_r+0xe4>)
 80027d2:	f000 fdbb 	bl	800334c <__malloc_lock>
 80027d6:	6833      	ldr	r3, [r6, #0]
 80027d8:	461c      	mov	r4, r3
 80027da:	bb34      	cbnz	r4, 800282a <_malloc_r+0x82>
 80027dc:	4629      	mov	r1, r5
 80027de:	4638      	mov	r0, r7
 80027e0:	f7ff ffc2 	bl	8002768 <sbrk_aligned>
 80027e4:	1c43      	adds	r3, r0, #1
 80027e6:	4604      	mov	r4, r0
 80027e8:	d14d      	bne.n	8002886 <_malloc_r+0xde>
 80027ea:	6834      	ldr	r4, [r6, #0]
 80027ec:	4626      	mov	r6, r4
 80027ee:	2e00      	cmp	r6, #0
 80027f0:	d140      	bne.n	8002874 <_malloc_r+0xcc>
 80027f2:	6823      	ldr	r3, [r4, #0]
 80027f4:	4631      	mov	r1, r6
 80027f6:	4638      	mov	r0, r7
 80027f8:	eb04 0803 	add.w	r8, r4, r3
 80027fc:	f000 fb36 	bl	8002e6c <_sbrk_r>
 8002800:	4580      	cmp	r8, r0
 8002802:	d13a      	bne.n	800287a <_malloc_r+0xd2>
 8002804:	6821      	ldr	r1, [r4, #0]
 8002806:	3503      	adds	r5, #3
 8002808:	1a6d      	subs	r5, r5, r1
 800280a:	f025 0503 	bic.w	r5, r5, #3
 800280e:	3508      	adds	r5, #8
 8002810:	2d0c      	cmp	r5, #12
 8002812:	bf38      	it	cc
 8002814:	250c      	movcc	r5, #12
 8002816:	4629      	mov	r1, r5
 8002818:	4638      	mov	r0, r7
 800281a:	f7ff ffa5 	bl	8002768 <sbrk_aligned>
 800281e:	3001      	adds	r0, #1
 8002820:	d02b      	beq.n	800287a <_malloc_r+0xd2>
 8002822:	6823      	ldr	r3, [r4, #0]
 8002824:	442b      	add	r3, r5
 8002826:	6023      	str	r3, [r4, #0]
 8002828:	e00e      	b.n	8002848 <_malloc_r+0xa0>
 800282a:	6822      	ldr	r2, [r4, #0]
 800282c:	1b52      	subs	r2, r2, r5
 800282e:	d41e      	bmi.n	800286e <_malloc_r+0xc6>
 8002830:	2a0b      	cmp	r2, #11
 8002832:	d916      	bls.n	8002862 <_malloc_r+0xba>
 8002834:	1961      	adds	r1, r4, r5
 8002836:	42a3      	cmp	r3, r4
 8002838:	6025      	str	r5, [r4, #0]
 800283a:	bf18      	it	ne
 800283c:	6059      	strne	r1, [r3, #4]
 800283e:	6863      	ldr	r3, [r4, #4]
 8002840:	bf08      	it	eq
 8002842:	6031      	streq	r1, [r6, #0]
 8002844:	5162      	str	r2, [r4, r5]
 8002846:	604b      	str	r3, [r1, #4]
 8002848:	4638      	mov	r0, r7
 800284a:	f104 060b 	add.w	r6, r4, #11
 800284e:	f000 fd83 	bl	8003358 <__malloc_unlock>
 8002852:	f026 0607 	bic.w	r6, r6, #7
 8002856:	1d23      	adds	r3, r4, #4
 8002858:	1af2      	subs	r2, r6, r3
 800285a:	d0b6      	beq.n	80027ca <_malloc_r+0x22>
 800285c:	1b9b      	subs	r3, r3, r6
 800285e:	50a3      	str	r3, [r4, r2]
 8002860:	e7b3      	b.n	80027ca <_malloc_r+0x22>
 8002862:	6862      	ldr	r2, [r4, #4]
 8002864:	42a3      	cmp	r3, r4
 8002866:	bf0c      	ite	eq
 8002868:	6032      	streq	r2, [r6, #0]
 800286a:	605a      	strne	r2, [r3, #4]
 800286c:	e7ec      	b.n	8002848 <_malloc_r+0xa0>
 800286e:	4623      	mov	r3, r4
 8002870:	6864      	ldr	r4, [r4, #4]
 8002872:	e7b2      	b.n	80027da <_malloc_r+0x32>
 8002874:	4634      	mov	r4, r6
 8002876:	6876      	ldr	r6, [r6, #4]
 8002878:	e7b9      	b.n	80027ee <_malloc_r+0x46>
 800287a:	230c      	movs	r3, #12
 800287c:	603b      	str	r3, [r7, #0]
 800287e:	4638      	mov	r0, r7
 8002880:	f000 fd6a 	bl	8003358 <__malloc_unlock>
 8002884:	e7a1      	b.n	80027ca <_malloc_r+0x22>
 8002886:	6025      	str	r5, [r4, #0]
 8002888:	e7de      	b.n	8002848 <_malloc_r+0xa0>
 800288a:	bf00      	nop
 800288c:	200000dc 	.word	0x200000dc

08002890 <__sfputc_r>:
 8002890:	6893      	ldr	r3, [r2, #8]
 8002892:	3b01      	subs	r3, #1
 8002894:	2b00      	cmp	r3, #0
 8002896:	b410      	push	{r4}
 8002898:	6093      	str	r3, [r2, #8]
 800289a:	da08      	bge.n	80028ae <__sfputc_r+0x1e>
 800289c:	6994      	ldr	r4, [r2, #24]
 800289e:	42a3      	cmp	r3, r4
 80028a0:	db01      	blt.n	80028a6 <__sfputc_r+0x16>
 80028a2:	290a      	cmp	r1, #10
 80028a4:	d103      	bne.n	80028ae <__sfputc_r+0x1e>
 80028a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80028aa:	f000 bb33 	b.w	8002f14 <__swbuf_r>
 80028ae:	6813      	ldr	r3, [r2, #0]
 80028b0:	1c58      	adds	r0, r3, #1
 80028b2:	6010      	str	r0, [r2, #0]
 80028b4:	7019      	strb	r1, [r3, #0]
 80028b6:	4608      	mov	r0, r1
 80028b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80028bc:	4770      	bx	lr

080028be <__sfputs_r>:
 80028be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028c0:	4606      	mov	r6, r0
 80028c2:	460f      	mov	r7, r1
 80028c4:	4614      	mov	r4, r2
 80028c6:	18d5      	adds	r5, r2, r3
 80028c8:	42ac      	cmp	r4, r5
 80028ca:	d101      	bne.n	80028d0 <__sfputs_r+0x12>
 80028cc:	2000      	movs	r0, #0
 80028ce:	e007      	b.n	80028e0 <__sfputs_r+0x22>
 80028d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028d4:	463a      	mov	r2, r7
 80028d6:	4630      	mov	r0, r6
 80028d8:	f7ff ffda 	bl	8002890 <__sfputc_r>
 80028dc:	1c43      	adds	r3, r0, #1
 80028de:	d1f3      	bne.n	80028c8 <__sfputs_r+0xa>
 80028e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080028e4 <_vfiprintf_r>:
 80028e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028e8:	460d      	mov	r5, r1
 80028ea:	b09d      	sub	sp, #116	; 0x74
 80028ec:	4614      	mov	r4, r2
 80028ee:	4698      	mov	r8, r3
 80028f0:	4606      	mov	r6, r0
 80028f2:	b118      	cbz	r0, 80028fc <_vfiprintf_r+0x18>
 80028f4:	6983      	ldr	r3, [r0, #24]
 80028f6:	b90b      	cbnz	r3, 80028fc <_vfiprintf_r+0x18>
 80028f8:	f7ff fe96 	bl	8002628 <__sinit>
 80028fc:	4b89      	ldr	r3, [pc, #548]	; (8002b24 <_vfiprintf_r+0x240>)
 80028fe:	429d      	cmp	r5, r3
 8002900:	d11b      	bne.n	800293a <_vfiprintf_r+0x56>
 8002902:	6875      	ldr	r5, [r6, #4]
 8002904:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002906:	07d9      	lsls	r1, r3, #31
 8002908:	d405      	bmi.n	8002916 <_vfiprintf_r+0x32>
 800290a:	89ab      	ldrh	r3, [r5, #12]
 800290c:	059a      	lsls	r2, r3, #22
 800290e:	d402      	bmi.n	8002916 <_vfiprintf_r+0x32>
 8002910:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002912:	f7ff ff27 	bl	8002764 <__retarget_lock_acquire_recursive>
 8002916:	89ab      	ldrh	r3, [r5, #12]
 8002918:	071b      	lsls	r3, r3, #28
 800291a:	d501      	bpl.n	8002920 <_vfiprintf_r+0x3c>
 800291c:	692b      	ldr	r3, [r5, #16]
 800291e:	b9eb      	cbnz	r3, 800295c <_vfiprintf_r+0x78>
 8002920:	4629      	mov	r1, r5
 8002922:	4630      	mov	r0, r6
 8002924:	f000 fb5a 	bl	8002fdc <__swsetup_r>
 8002928:	b1c0      	cbz	r0, 800295c <_vfiprintf_r+0x78>
 800292a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800292c:	07dc      	lsls	r4, r3, #31
 800292e:	d50e      	bpl.n	800294e <_vfiprintf_r+0x6a>
 8002930:	f04f 30ff 	mov.w	r0, #4294967295
 8002934:	b01d      	add	sp, #116	; 0x74
 8002936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800293a:	4b7b      	ldr	r3, [pc, #492]	; (8002b28 <_vfiprintf_r+0x244>)
 800293c:	429d      	cmp	r5, r3
 800293e:	d101      	bne.n	8002944 <_vfiprintf_r+0x60>
 8002940:	68b5      	ldr	r5, [r6, #8]
 8002942:	e7df      	b.n	8002904 <_vfiprintf_r+0x20>
 8002944:	4b79      	ldr	r3, [pc, #484]	; (8002b2c <_vfiprintf_r+0x248>)
 8002946:	429d      	cmp	r5, r3
 8002948:	bf08      	it	eq
 800294a:	68f5      	ldreq	r5, [r6, #12]
 800294c:	e7da      	b.n	8002904 <_vfiprintf_r+0x20>
 800294e:	89ab      	ldrh	r3, [r5, #12]
 8002950:	0598      	lsls	r0, r3, #22
 8002952:	d4ed      	bmi.n	8002930 <_vfiprintf_r+0x4c>
 8002954:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002956:	f7ff ff06 	bl	8002766 <__retarget_lock_release_recursive>
 800295a:	e7e9      	b.n	8002930 <_vfiprintf_r+0x4c>
 800295c:	2300      	movs	r3, #0
 800295e:	9309      	str	r3, [sp, #36]	; 0x24
 8002960:	2320      	movs	r3, #32
 8002962:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002966:	f8cd 800c 	str.w	r8, [sp, #12]
 800296a:	2330      	movs	r3, #48	; 0x30
 800296c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002b30 <_vfiprintf_r+0x24c>
 8002970:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002974:	f04f 0901 	mov.w	r9, #1
 8002978:	4623      	mov	r3, r4
 800297a:	469a      	mov	sl, r3
 800297c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002980:	b10a      	cbz	r2, 8002986 <_vfiprintf_r+0xa2>
 8002982:	2a25      	cmp	r2, #37	; 0x25
 8002984:	d1f9      	bne.n	800297a <_vfiprintf_r+0x96>
 8002986:	ebba 0b04 	subs.w	fp, sl, r4
 800298a:	d00b      	beq.n	80029a4 <_vfiprintf_r+0xc0>
 800298c:	465b      	mov	r3, fp
 800298e:	4622      	mov	r2, r4
 8002990:	4629      	mov	r1, r5
 8002992:	4630      	mov	r0, r6
 8002994:	f7ff ff93 	bl	80028be <__sfputs_r>
 8002998:	3001      	adds	r0, #1
 800299a:	f000 80aa 	beq.w	8002af2 <_vfiprintf_r+0x20e>
 800299e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80029a0:	445a      	add	r2, fp
 80029a2:	9209      	str	r2, [sp, #36]	; 0x24
 80029a4:	f89a 3000 	ldrb.w	r3, [sl]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 80a2 	beq.w	8002af2 <_vfiprintf_r+0x20e>
 80029ae:	2300      	movs	r3, #0
 80029b0:	f04f 32ff 	mov.w	r2, #4294967295
 80029b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80029b8:	f10a 0a01 	add.w	sl, sl, #1
 80029bc:	9304      	str	r3, [sp, #16]
 80029be:	9307      	str	r3, [sp, #28]
 80029c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80029c4:	931a      	str	r3, [sp, #104]	; 0x68
 80029c6:	4654      	mov	r4, sl
 80029c8:	2205      	movs	r2, #5
 80029ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029ce:	4858      	ldr	r0, [pc, #352]	; (8002b30 <_vfiprintf_r+0x24c>)
 80029d0:	f7fd fc1e 	bl	8000210 <memchr>
 80029d4:	9a04      	ldr	r2, [sp, #16]
 80029d6:	b9d8      	cbnz	r0, 8002a10 <_vfiprintf_r+0x12c>
 80029d8:	06d1      	lsls	r1, r2, #27
 80029da:	bf44      	itt	mi
 80029dc:	2320      	movmi	r3, #32
 80029de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80029e2:	0713      	lsls	r3, r2, #28
 80029e4:	bf44      	itt	mi
 80029e6:	232b      	movmi	r3, #43	; 0x2b
 80029e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80029ec:	f89a 3000 	ldrb.w	r3, [sl]
 80029f0:	2b2a      	cmp	r3, #42	; 0x2a
 80029f2:	d015      	beq.n	8002a20 <_vfiprintf_r+0x13c>
 80029f4:	9a07      	ldr	r2, [sp, #28]
 80029f6:	4654      	mov	r4, sl
 80029f8:	2000      	movs	r0, #0
 80029fa:	f04f 0c0a 	mov.w	ip, #10
 80029fe:	4621      	mov	r1, r4
 8002a00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a04:	3b30      	subs	r3, #48	; 0x30
 8002a06:	2b09      	cmp	r3, #9
 8002a08:	d94e      	bls.n	8002aa8 <_vfiprintf_r+0x1c4>
 8002a0a:	b1b0      	cbz	r0, 8002a3a <_vfiprintf_r+0x156>
 8002a0c:	9207      	str	r2, [sp, #28]
 8002a0e:	e014      	b.n	8002a3a <_vfiprintf_r+0x156>
 8002a10:	eba0 0308 	sub.w	r3, r0, r8
 8002a14:	fa09 f303 	lsl.w	r3, r9, r3
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	9304      	str	r3, [sp, #16]
 8002a1c:	46a2      	mov	sl, r4
 8002a1e:	e7d2      	b.n	80029c6 <_vfiprintf_r+0xe2>
 8002a20:	9b03      	ldr	r3, [sp, #12]
 8002a22:	1d19      	adds	r1, r3, #4
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	9103      	str	r1, [sp, #12]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	bfbb      	ittet	lt
 8002a2c:	425b      	neglt	r3, r3
 8002a2e:	f042 0202 	orrlt.w	r2, r2, #2
 8002a32:	9307      	strge	r3, [sp, #28]
 8002a34:	9307      	strlt	r3, [sp, #28]
 8002a36:	bfb8      	it	lt
 8002a38:	9204      	strlt	r2, [sp, #16]
 8002a3a:	7823      	ldrb	r3, [r4, #0]
 8002a3c:	2b2e      	cmp	r3, #46	; 0x2e
 8002a3e:	d10c      	bne.n	8002a5a <_vfiprintf_r+0x176>
 8002a40:	7863      	ldrb	r3, [r4, #1]
 8002a42:	2b2a      	cmp	r3, #42	; 0x2a
 8002a44:	d135      	bne.n	8002ab2 <_vfiprintf_r+0x1ce>
 8002a46:	9b03      	ldr	r3, [sp, #12]
 8002a48:	1d1a      	adds	r2, r3, #4
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	9203      	str	r2, [sp, #12]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	bfb8      	it	lt
 8002a52:	f04f 33ff 	movlt.w	r3, #4294967295
 8002a56:	3402      	adds	r4, #2
 8002a58:	9305      	str	r3, [sp, #20]
 8002a5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002b40 <_vfiprintf_r+0x25c>
 8002a5e:	7821      	ldrb	r1, [r4, #0]
 8002a60:	2203      	movs	r2, #3
 8002a62:	4650      	mov	r0, sl
 8002a64:	f7fd fbd4 	bl	8000210 <memchr>
 8002a68:	b140      	cbz	r0, 8002a7c <_vfiprintf_r+0x198>
 8002a6a:	2340      	movs	r3, #64	; 0x40
 8002a6c:	eba0 000a 	sub.w	r0, r0, sl
 8002a70:	fa03 f000 	lsl.w	r0, r3, r0
 8002a74:	9b04      	ldr	r3, [sp, #16]
 8002a76:	4303      	orrs	r3, r0
 8002a78:	3401      	adds	r4, #1
 8002a7a:	9304      	str	r3, [sp, #16]
 8002a7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a80:	482c      	ldr	r0, [pc, #176]	; (8002b34 <_vfiprintf_r+0x250>)
 8002a82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002a86:	2206      	movs	r2, #6
 8002a88:	f7fd fbc2 	bl	8000210 <memchr>
 8002a8c:	2800      	cmp	r0, #0
 8002a8e:	d03f      	beq.n	8002b10 <_vfiprintf_r+0x22c>
 8002a90:	4b29      	ldr	r3, [pc, #164]	; (8002b38 <_vfiprintf_r+0x254>)
 8002a92:	bb1b      	cbnz	r3, 8002adc <_vfiprintf_r+0x1f8>
 8002a94:	9b03      	ldr	r3, [sp, #12]
 8002a96:	3307      	adds	r3, #7
 8002a98:	f023 0307 	bic.w	r3, r3, #7
 8002a9c:	3308      	adds	r3, #8
 8002a9e:	9303      	str	r3, [sp, #12]
 8002aa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002aa2:	443b      	add	r3, r7
 8002aa4:	9309      	str	r3, [sp, #36]	; 0x24
 8002aa6:	e767      	b.n	8002978 <_vfiprintf_r+0x94>
 8002aa8:	fb0c 3202 	mla	r2, ip, r2, r3
 8002aac:	460c      	mov	r4, r1
 8002aae:	2001      	movs	r0, #1
 8002ab0:	e7a5      	b.n	80029fe <_vfiprintf_r+0x11a>
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	3401      	adds	r4, #1
 8002ab6:	9305      	str	r3, [sp, #20]
 8002ab8:	4619      	mov	r1, r3
 8002aba:	f04f 0c0a 	mov.w	ip, #10
 8002abe:	4620      	mov	r0, r4
 8002ac0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ac4:	3a30      	subs	r2, #48	; 0x30
 8002ac6:	2a09      	cmp	r2, #9
 8002ac8:	d903      	bls.n	8002ad2 <_vfiprintf_r+0x1ee>
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0c5      	beq.n	8002a5a <_vfiprintf_r+0x176>
 8002ace:	9105      	str	r1, [sp, #20]
 8002ad0:	e7c3      	b.n	8002a5a <_vfiprintf_r+0x176>
 8002ad2:	fb0c 2101 	mla	r1, ip, r1, r2
 8002ad6:	4604      	mov	r4, r0
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e7f0      	b.n	8002abe <_vfiprintf_r+0x1da>
 8002adc:	ab03      	add	r3, sp, #12
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	462a      	mov	r2, r5
 8002ae2:	4b16      	ldr	r3, [pc, #88]	; (8002b3c <_vfiprintf_r+0x258>)
 8002ae4:	a904      	add	r1, sp, #16
 8002ae6:	4630      	mov	r0, r6
 8002ae8:	f3af 8000 	nop.w
 8002aec:	4607      	mov	r7, r0
 8002aee:	1c78      	adds	r0, r7, #1
 8002af0:	d1d6      	bne.n	8002aa0 <_vfiprintf_r+0x1bc>
 8002af2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002af4:	07d9      	lsls	r1, r3, #31
 8002af6:	d405      	bmi.n	8002b04 <_vfiprintf_r+0x220>
 8002af8:	89ab      	ldrh	r3, [r5, #12]
 8002afa:	059a      	lsls	r2, r3, #22
 8002afc:	d402      	bmi.n	8002b04 <_vfiprintf_r+0x220>
 8002afe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002b00:	f7ff fe31 	bl	8002766 <__retarget_lock_release_recursive>
 8002b04:	89ab      	ldrh	r3, [r5, #12]
 8002b06:	065b      	lsls	r3, r3, #25
 8002b08:	f53f af12 	bmi.w	8002930 <_vfiprintf_r+0x4c>
 8002b0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002b0e:	e711      	b.n	8002934 <_vfiprintf_r+0x50>
 8002b10:	ab03      	add	r3, sp, #12
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	462a      	mov	r2, r5
 8002b16:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <_vfiprintf_r+0x258>)
 8002b18:	a904      	add	r1, sp, #16
 8002b1a:	4630      	mov	r0, r6
 8002b1c:	f000 f880 	bl	8002c20 <_printf_i>
 8002b20:	e7e4      	b.n	8002aec <_vfiprintf_r+0x208>
 8002b22:	bf00      	nop
 8002b24:	080034c4 	.word	0x080034c4
 8002b28:	080034e4 	.word	0x080034e4
 8002b2c:	080034a4 	.word	0x080034a4
 8002b30:	08003504 	.word	0x08003504
 8002b34:	0800350e 	.word	0x0800350e
 8002b38:	00000000 	.word	0x00000000
 8002b3c:	080028bf 	.word	0x080028bf
 8002b40:	0800350a 	.word	0x0800350a

08002b44 <_printf_common>:
 8002b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b48:	4616      	mov	r6, r2
 8002b4a:	4699      	mov	r9, r3
 8002b4c:	688a      	ldr	r2, [r1, #8]
 8002b4e:	690b      	ldr	r3, [r1, #16]
 8002b50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002b54:	4293      	cmp	r3, r2
 8002b56:	bfb8      	it	lt
 8002b58:	4613      	movlt	r3, r2
 8002b5a:	6033      	str	r3, [r6, #0]
 8002b5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002b60:	4607      	mov	r7, r0
 8002b62:	460c      	mov	r4, r1
 8002b64:	b10a      	cbz	r2, 8002b6a <_printf_common+0x26>
 8002b66:	3301      	adds	r3, #1
 8002b68:	6033      	str	r3, [r6, #0]
 8002b6a:	6823      	ldr	r3, [r4, #0]
 8002b6c:	0699      	lsls	r1, r3, #26
 8002b6e:	bf42      	ittt	mi
 8002b70:	6833      	ldrmi	r3, [r6, #0]
 8002b72:	3302      	addmi	r3, #2
 8002b74:	6033      	strmi	r3, [r6, #0]
 8002b76:	6825      	ldr	r5, [r4, #0]
 8002b78:	f015 0506 	ands.w	r5, r5, #6
 8002b7c:	d106      	bne.n	8002b8c <_printf_common+0x48>
 8002b7e:	f104 0a19 	add.w	sl, r4, #25
 8002b82:	68e3      	ldr	r3, [r4, #12]
 8002b84:	6832      	ldr	r2, [r6, #0]
 8002b86:	1a9b      	subs	r3, r3, r2
 8002b88:	42ab      	cmp	r3, r5
 8002b8a:	dc26      	bgt.n	8002bda <_printf_common+0x96>
 8002b8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002b90:	1e13      	subs	r3, r2, #0
 8002b92:	6822      	ldr	r2, [r4, #0]
 8002b94:	bf18      	it	ne
 8002b96:	2301      	movne	r3, #1
 8002b98:	0692      	lsls	r2, r2, #26
 8002b9a:	d42b      	bmi.n	8002bf4 <_printf_common+0xb0>
 8002b9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ba0:	4649      	mov	r1, r9
 8002ba2:	4638      	mov	r0, r7
 8002ba4:	47c0      	blx	r8
 8002ba6:	3001      	adds	r0, #1
 8002ba8:	d01e      	beq.n	8002be8 <_printf_common+0xa4>
 8002baa:	6823      	ldr	r3, [r4, #0]
 8002bac:	68e5      	ldr	r5, [r4, #12]
 8002bae:	6832      	ldr	r2, [r6, #0]
 8002bb0:	f003 0306 	and.w	r3, r3, #6
 8002bb4:	2b04      	cmp	r3, #4
 8002bb6:	bf08      	it	eq
 8002bb8:	1aad      	subeq	r5, r5, r2
 8002bba:	68a3      	ldr	r3, [r4, #8]
 8002bbc:	6922      	ldr	r2, [r4, #16]
 8002bbe:	bf0c      	ite	eq
 8002bc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002bc4:	2500      	movne	r5, #0
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	bfc4      	itt	gt
 8002bca:	1a9b      	subgt	r3, r3, r2
 8002bcc:	18ed      	addgt	r5, r5, r3
 8002bce:	2600      	movs	r6, #0
 8002bd0:	341a      	adds	r4, #26
 8002bd2:	42b5      	cmp	r5, r6
 8002bd4:	d11a      	bne.n	8002c0c <_printf_common+0xc8>
 8002bd6:	2000      	movs	r0, #0
 8002bd8:	e008      	b.n	8002bec <_printf_common+0xa8>
 8002bda:	2301      	movs	r3, #1
 8002bdc:	4652      	mov	r2, sl
 8002bde:	4649      	mov	r1, r9
 8002be0:	4638      	mov	r0, r7
 8002be2:	47c0      	blx	r8
 8002be4:	3001      	adds	r0, #1
 8002be6:	d103      	bne.n	8002bf0 <_printf_common+0xac>
 8002be8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bf0:	3501      	adds	r5, #1
 8002bf2:	e7c6      	b.n	8002b82 <_printf_common+0x3e>
 8002bf4:	18e1      	adds	r1, r4, r3
 8002bf6:	1c5a      	adds	r2, r3, #1
 8002bf8:	2030      	movs	r0, #48	; 0x30
 8002bfa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002bfe:	4422      	add	r2, r4
 8002c00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002c04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002c08:	3302      	adds	r3, #2
 8002c0a:	e7c7      	b.n	8002b9c <_printf_common+0x58>
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	4622      	mov	r2, r4
 8002c10:	4649      	mov	r1, r9
 8002c12:	4638      	mov	r0, r7
 8002c14:	47c0      	blx	r8
 8002c16:	3001      	adds	r0, #1
 8002c18:	d0e6      	beq.n	8002be8 <_printf_common+0xa4>
 8002c1a:	3601      	adds	r6, #1
 8002c1c:	e7d9      	b.n	8002bd2 <_printf_common+0x8e>
	...

08002c20 <_printf_i>:
 8002c20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c24:	7e0f      	ldrb	r7, [r1, #24]
 8002c26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002c28:	2f78      	cmp	r7, #120	; 0x78
 8002c2a:	4691      	mov	r9, r2
 8002c2c:	4680      	mov	r8, r0
 8002c2e:	460c      	mov	r4, r1
 8002c30:	469a      	mov	sl, r3
 8002c32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002c36:	d807      	bhi.n	8002c48 <_printf_i+0x28>
 8002c38:	2f62      	cmp	r7, #98	; 0x62
 8002c3a:	d80a      	bhi.n	8002c52 <_printf_i+0x32>
 8002c3c:	2f00      	cmp	r7, #0
 8002c3e:	f000 80d8 	beq.w	8002df2 <_printf_i+0x1d2>
 8002c42:	2f58      	cmp	r7, #88	; 0x58
 8002c44:	f000 80a3 	beq.w	8002d8e <_printf_i+0x16e>
 8002c48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002c50:	e03a      	b.n	8002cc8 <_printf_i+0xa8>
 8002c52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002c56:	2b15      	cmp	r3, #21
 8002c58:	d8f6      	bhi.n	8002c48 <_printf_i+0x28>
 8002c5a:	a101      	add	r1, pc, #4	; (adr r1, 8002c60 <_printf_i+0x40>)
 8002c5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002c60:	08002cb9 	.word	0x08002cb9
 8002c64:	08002ccd 	.word	0x08002ccd
 8002c68:	08002c49 	.word	0x08002c49
 8002c6c:	08002c49 	.word	0x08002c49
 8002c70:	08002c49 	.word	0x08002c49
 8002c74:	08002c49 	.word	0x08002c49
 8002c78:	08002ccd 	.word	0x08002ccd
 8002c7c:	08002c49 	.word	0x08002c49
 8002c80:	08002c49 	.word	0x08002c49
 8002c84:	08002c49 	.word	0x08002c49
 8002c88:	08002c49 	.word	0x08002c49
 8002c8c:	08002dd9 	.word	0x08002dd9
 8002c90:	08002cfd 	.word	0x08002cfd
 8002c94:	08002dbb 	.word	0x08002dbb
 8002c98:	08002c49 	.word	0x08002c49
 8002c9c:	08002c49 	.word	0x08002c49
 8002ca0:	08002dfb 	.word	0x08002dfb
 8002ca4:	08002c49 	.word	0x08002c49
 8002ca8:	08002cfd 	.word	0x08002cfd
 8002cac:	08002c49 	.word	0x08002c49
 8002cb0:	08002c49 	.word	0x08002c49
 8002cb4:	08002dc3 	.word	0x08002dc3
 8002cb8:	682b      	ldr	r3, [r5, #0]
 8002cba:	1d1a      	adds	r2, r3, #4
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	602a      	str	r2, [r5, #0]
 8002cc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002cc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e0a3      	b.n	8002e14 <_printf_i+0x1f4>
 8002ccc:	6820      	ldr	r0, [r4, #0]
 8002cce:	6829      	ldr	r1, [r5, #0]
 8002cd0:	0606      	lsls	r6, r0, #24
 8002cd2:	f101 0304 	add.w	r3, r1, #4
 8002cd6:	d50a      	bpl.n	8002cee <_printf_i+0xce>
 8002cd8:	680e      	ldr	r6, [r1, #0]
 8002cda:	602b      	str	r3, [r5, #0]
 8002cdc:	2e00      	cmp	r6, #0
 8002cde:	da03      	bge.n	8002ce8 <_printf_i+0xc8>
 8002ce0:	232d      	movs	r3, #45	; 0x2d
 8002ce2:	4276      	negs	r6, r6
 8002ce4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ce8:	485e      	ldr	r0, [pc, #376]	; (8002e64 <_printf_i+0x244>)
 8002cea:	230a      	movs	r3, #10
 8002cec:	e019      	b.n	8002d22 <_printf_i+0x102>
 8002cee:	680e      	ldr	r6, [r1, #0]
 8002cf0:	602b      	str	r3, [r5, #0]
 8002cf2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002cf6:	bf18      	it	ne
 8002cf8:	b236      	sxthne	r6, r6
 8002cfa:	e7ef      	b.n	8002cdc <_printf_i+0xbc>
 8002cfc:	682b      	ldr	r3, [r5, #0]
 8002cfe:	6820      	ldr	r0, [r4, #0]
 8002d00:	1d19      	adds	r1, r3, #4
 8002d02:	6029      	str	r1, [r5, #0]
 8002d04:	0601      	lsls	r1, r0, #24
 8002d06:	d501      	bpl.n	8002d0c <_printf_i+0xec>
 8002d08:	681e      	ldr	r6, [r3, #0]
 8002d0a:	e002      	b.n	8002d12 <_printf_i+0xf2>
 8002d0c:	0646      	lsls	r6, r0, #25
 8002d0e:	d5fb      	bpl.n	8002d08 <_printf_i+0xe8>
 8002d10:	881e      	ldrh	r6, [r3, #0]
 8002d12:	4854      	ldr	r0, [pc, #336]	; (8002e64 <_printf_i+0x244>)
 8002d14:	2f6f      	cmp	r7, #111	; 0x6f
 8002d16:	bf0c      	ite	eq
 8002d18:	2308      	moveq	r3, #8
 8002d1a:	230a      	movne	r3, #10
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002d22:	6865      	ldr	r5, [r4, #4]
 8002d24:	60a5      	str	r5, [r4, #8]
 8002d26:	2d00      	cmp	r5, #0
 8002d28:	bfa2      	ittt	ge
 8002d2a:	6821      	ldrge	r1, [r4, #0]
 8002d2c:	f021 0104 	bicge.w	r1, r1, #4
 8002d30:	6021      	strge	r1, [r4, #0]
 8002d32:	b90e      	cbnz	r6, 8002d38 <_printf_i+0x118>
 8002d34:	2d00      	cmp	r5, #0
 8002d36:	d04d      	beq.n	8002dd4 <_printf_i+0x1b4>
 8002d38:	4615      	mov	r5, r2
 8002d3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8002d3e:	fb03 6711 	mls	r7, r3, r1, r6
 8002d42:	5dc7      	ldrb	r7, [r0, r7]
 8002d44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002d48:	4637      	mov	r7, r6
 8002d4a:	42bb      	cmp	r3, r7
 8002d4c:	460e      	mov	r6, r1
 8002d4e:	d9f4      	bls.n	8002d3a <_printf_i+0x11a>
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	d10b      	bne.n	8002d6c <_printf_i+0x14c>
 8002d54:	6823      	ldr	r3, [r4, #0]
 8002d56:	07de      	lsls	r6, r3, #31
 8002d58:	d508      	bpl.n	8002d6c <_printf_i+0x14c>
 8002d5a:	6923      	ldr	r3, [r4, #16]
 8002d5c:	6861      	ldr	r1, [r4, #4]
 8002d5e:	4299      	cmp	r1, r3
 8002d60:	bfde      	ittt	le
 8002d62:	2330      	movle	r3, #48	; 0x30
 8002d64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002d68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002d6c:	1b52      	subs	r2, r2, r5
 8002d6e:	6122      	str	r2, [r4, #16]
 8002d70:	f8cd a000 	str.w	sl, [sp]
 8002d74:	464b      	mov	r3, r9
 8002d76:	aa03      	add	r2, sp, #12
 8002d78:	4621      	mov	r1, r4
 8002d7a:	4640      	mov	r0, r8
 8002d7c:	f7ff fee2 	bl	8002b44 <_printf_common>
 8002d80:	3001      	adds	r0, #1
 8002d82:	d14c      	bne.n	8002e1e <_printf_i+0x1fe>
 8002d84:	f04f 30ff 	mov.w	r0, #4294967295
 8002d88:	b004      	add	sp, #16
 8002d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d8e:	4835      	ldr	r0, [pc, #212]	; (8002e64 <_printf_i+0x244>)
 8002d90:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002d94:	6829      	ldr	r1, [r5, #0]
 8002d96:	6823      	ldr	r3, [r4, #0]
 8002d98:	f851 6b04 	ldr.w	r6, [r1], #4
 8002d9c:	6029      	str	r1, [r5, #0]
 8002d9e:	061d      	lsls	r5, r3, #24
 8002da0:	d514      	bpl.n	8002dcc <_printf_i+0x1ac>
 8002da2:	07df      	lsls	r7, r3, #31
 8002da4:	bf44      	itt	mi
 8002da6:	f043 0320 	orrmi.w	r3, r3, #32
 8002daa:	6023      	strmi	r3, [r4, #0]
 8002dac:	b91e      	cbnz	r6, 8002db6 <_printf_i+0x196>
 8002dae:	6823      	ldr	r3, [r4, #0]
 8002db0:	f023 0320 	bic.w	r3, r3, #32
 8002db4:	6023      	str	r3, [r4, #0]
 8002db6:	2310      	movs	r3, #16
 8002db8:	e7b0      	b.n	8002d1c <_printf_i+0xfc>
 8002dba:	6823      	ldr	r3, [r4, #0]
 8002dbc:	f043 0320 	orr.w	r3, r3, #32
 8002dc0:	6023      	str	r3, [r4, #0]
 8002dc2:	2378      	movs	r3, #120	; 0x78
 8002dc4:	4828      	ldr	r0, [pc, #160]	; (8002e68 <_printf_i+0x248>)
 8002dc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002dca:	e7e3      	b.n	8002d94 <_printf_i+0x174>
 8002dcc:	0659      	lsls	r1, r3, #25
 8002dce:	bf48      	it	mi
 8002dd0:	b2b6      	uxthmi	r6, r6
 8002dd2:	e7e6      	b.n	8002da2 <_printf_i+0x182>
 8002dd4:	4615      	mov	r5, r2
 8002dd6:	e7bb      	b.n	8002d50 <_printf_i+0x130>
 8002dd8:	682b      	ldr	r3, [r5, #0]
 8002dda:	6826      	ldr	r6, [r4, #0]
 8002ddc:	6961      	ldr	r1, [r4, #20]
 8002dde:	1d18      	adds	r0, r3, #4
 8002de0:	6028      	str	r0, [r5, #0]
 8002de2:	0635      	lsls	r5, r6, #24
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	d501      	bpl.n	8002dec <_printf_i+0x1cc>
 8002de8:	6019      	str	r1, [r3, #0]
 8002dea:	e002      	b.n	8002df2 <_printf_i+0x1d2>
 8002dec:	0670      	lsls	r0, r6, #25
 8002dee:	d5fb      	bpl.n	8002de8 <_printf_i+0x1c8>
 8002df0:	8019      	strh	r1, [r3, #0]
 8002df2:	2300      	movs	r3, #0
 8002df4:	6123      	str	r3, [r4, #16]
 8002df6:	4615      	mov	r5, r2
 8002df8:	e7ba      	b.n	8002d70 <_printf_i+0x150>
 8002dfa:	682b      	ldr	r3, [r5, #0]
 8002dfc:	1d1a      	adds	r2, r3, #4
 8002dfe:	602a      	str	r2, [r5, #0]
 8002e00:	681d      	ldr	r5, [r3, #0]
 8002e02:	6862      	ldr	r2, [r4, #4]
 8002e04:	2100      	movs	r1, #0
 8002e06:	4628      	mov	r0, r5
 8002e08:	f7fd fa02 	bl	8000210 <memchr>
 8002e0c:	b108      	cbz	r0, 8002e12 <_printf_i+0x1f2>
 8002e0e:	1b40      	subs	r0, r0, r5
 8002e10:	6060      	str	r0, [r4, #4]
 8002e12:	6863      	ldr	r3, [r4, #4]
 8002e14:	6123      	str	r3, [r4, #16]
 8002e16:	2300      	movs	r3, #0
 8002e18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e1c:	e7a8      	b.n	8002d70 <_printf_i+0x150>
 8002e1e:	6923      	ldr	r3, [r4, #16]
 8002e20:	462a      	mov	r2, r5
 8002e22:	4649      	mov	r1, r9
 8002e24:	4640      	mov	r0, r8
 8002e26:	47d0      	blx	sl
 8002e28:	3001      	adds	r0, #1
 8002e2a:	d0ab      	beq.n	8002d84 <_printf_i+0x164>
 8002e2c:	6823      	ldr	r3, [r4, #0]
 8002e2e:	079b      	lsls	r3, r3, #30
 8002e30:	d413      	bmi.n	8002e5a <_printf_i+0x23a>
 8002e32:	68e0      	ldr	r0, [r4, #12]
 8002e34:	9b03      	ldr	r3, [sp, #12]
 8002e36:	4298      	cmp	r0, r3
 8002e38:	bfb8      	it	lt
 8002e3a:	4618      	movlt	r0, r3
 8002e3c:	e7a4      	b.n	8002d88 <_printf_i+0x168>
 8002e3e:	2301      	movs	r3, #1
 8002e40:	4632      	mov	r2, r6
 8002e42:	4649      	mov	r1, r9
 8002e44:	4640      	mov	r0, r8
 8002e46:	47d0      	blx	sl
 8002e48:	3001      	adds	r0, #1
 8002e4a:	d09b      	beq.n	8002d84 <_printf_i+0x164>
 8002e4c:	3501      	adds	r5, #1
 8002e4e:	68e3      	ldr	r3, [r4, #12]
 8002e50:	9903      	ldr	r1, [sp, #12]
 8002e52:	1a5b      	subs	r3, r3, r1
 8002e54:	42ab      	cmp	r3, r5
 8002e56:	dcf2      	bgt.n	8002e3e <_printf_i+0x21e>
 8002e58:	e7eb      	b.n	8002e32 <_printf_i+0x212>
 8002e5a:	2500      	movs	r5, #0
 8002e5c:	f104 0619 	add.w	r6, r4, #25
 8002e60:	e7f5      	b.n	8002e4e <_printf_i+0x22e>
 8002e62:	bf00      	nop
 8002e64:	08003515 	.word	0x08003515
 8002e68:	08003526 	.word	0x08003526

08002e6c <_sbrk_r>:
 8002e6c:	b538      	push	{r3, r4, r5, lr}
 8002e6e:	4d06      	ldr	r5, [pc, #24]	; (8002e88 <_sbrk_r+0x1c>)
 8002e70:	2300      	movs	r3, #0
 8002e72:	4604      	mov	r4, r0
 8002e74:	4608      	mov	r0, r1
 8002e76:	602b      	str	r3, [r5, #0]
 8002e78:	f7fd fdee 	bl	8000a58 <_sbrk>
 8002e7c:	1c43      	adds	r3, r0, #1
 8002e7e:	d102      	bne.n	8002e86 <_sbrk_r+0x1a>
 8002e80:	682b      	ldr	r3, [r5, #0]
 8002e82:	b103      	cbz	r3, 8002e86 <_sbrk_r+0x1a>
 8002e84:	6023      	str	r3, [r4, #0]
 8002e86:	bd38      	pop	{r3, r4, r5, pc}
 8002e88:	200000e4 	.word	0x200000e4

08002e8c <__sread>:
 8002e8c:	b510      	push	{r4, lr}
 8002e8e:	460c      	mov	r4, r1
 8002e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e94:	f000 fab2 	bl	80033fc <_read_r>
 8002e98:	2800      	cmp	r0, #0
 8002e9a:	bfab      	itete	ge
 8002e9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002e9e:	89a3      	ldrhlt	r3, [r4, #12]
 8002ea0:	181b      	addge	r3, r3, r0
 8002ea2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002ea6:	bfac      	ite	ge
 8002ea8:	6563      	strge	r3, [r4, #84]	; 0x54
 8002eaa:	81a3      	strhlt	r3, [r4, #12]
 8002eac:	bd10      	pop	{r4, pc}

08002eae <__swrite>:
 8002eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002eb2:	461f      	mov	r7, r3
 8002eb4:	898b      	ldrh	r3, [r1, #12]
 8002eb6:	05db      	lsls	r3, r3, #23
 8002eb8:	4605      	mov	r5, r0
 8002eba:	460c      	mov	r4, r1
 8002ebc:	4616      	mov	r6, r2
 8002ebe:	d505      	bpl.n	8002ecc <__swrite+0x1e>
 8002ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f000 f9c8 	bl	800325c <_lseek_r>
 8002ecc:	89a3      	ldrh	r3, [r4, #12]
 8002ece:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ed2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ed6:	81a3      	strh	r3, [r4, #12]
 8002ed8:	4632      	mov	r2, r6
 8002eda:	463b      	mov	r3, r7
 8002edc:	4628      	mov	r0, r5
 8002ede:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002ee2:	f000 b869 	b.w	8002fb8 <_write_r>

08002ee6 <__sseek>:
 8002ee6:	b510      	push	{r4, lr}
 8002ee8:	460c      	mov	r4, r1
 8002eea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002eee:	f000 f9b5 	bl	800325c <_lseek_r>
 8002ef2:	1c43      	adds	r3, r0, #1
 8002ef4:	89a3      	ldrh	r3, [r4, #12]
 8002ef6:	bf15      	itete	ne
 8002ef8:	6560      	strne	r0, [r4, #84]	; 0x54
 8002efa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002efe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002f02:	81a3      	strheq	r3, [r4, #12]
 8002f04:	bf18      	it	ne
 8002f06:	81a3      	strhne	r3, [r4, #12]
 8002f08:	bd10      	pop	{r4, pc}

08002f0a <__sclose>:
 8002f0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f0e:	f000 b8d3 	b.w	80030b8 <_close_r>
	...

08002f14 <__swbuf_r>:
 8002f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f16:	460e      	mov	r6, r1
 8002f18:	4614      	mov	r4, r2
 8002f1a:	4605      	mov	r5, r0
 8002f1c:	b118      	cbz	r0, 8002f26 <__swbuf_r+0x12>
 8002f1e:	6983      	ldr	r3, [r0, #24]
 8002f20:	b90b      	cbnz	r3, 8002f26 <__swbuf_r+0x12>
 8002f22:	f7ff fb81 	bl	8002628 <__sinit>
 8002f26:	4b21      	ldr	r3, [pc, #132]	; (8002fac <__swbuf_r+0x98>)
 8002f28:	429c      	cmp	r4, r3
 8002f2a:	d12b      	bne.n	8002f84 <__swbuf_r+0x70>
 8002f2c:	686c      	ldr	r4, [r5, #4]
 8002f2e:	69a3      	ldr	r3, [r4, #24]
 8002f30:	60a3      	str	r3, [r4, #8]
 8002f32:	89a3      	ldrh	r3, [r4, #12]
 8002f34:	071a      	lsls	r2, r3, #28
 8002f36:	d52f      	bpl.n	8002f98 <__swbuf_r+0x84>
 8002f38:	6923      	ldr	r3, [r4, #16]
 8002f3a:	b36b      	cbz	r3, 8002f98 <__swbuf_r+0x84>
 8002f3c:	6923      	ldr	r3, [r4, #16]
 8002f3e:	6820      	ldr	r0, [r4, #0]
 8002f40:	1ac0      	subs	r0, r0, r3
 8002f42:	6963      	ldr	r3, [r4, #20]
 8002f44:	b2f6      	uxtb	r6, r6
 8002f46:	4283      	cmp	r3, r0
 8002f48:	4637      	mov	r7, r6
 8002f4a:	dc04      	bgt.n	8002f56 <__swbuf_r+0x42>
 8002f4c:	4621      	mov	r1, r4
 8002f4e:	4628      	mov	r0, r5
 8002f50:	f000 f948 	bl	80031e4 <_fflush_r>
 8002f54:	bb30      	cbnz	r0, 8002fa4 <__swbuf_r+0x90>
 8002f56:	68a3      	ldr	r3, [r4, #8]
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	60a3      	str	r3, [r4, #8]
 8002f5c:	6823      	ldr	r3, [r4, #0]
 8002f5e:	1c5a      	adds	r2, r3, #1
 8002f60:	6022      	str	r2, [r4, #0]
 8002f62:	701e      	strb	r6, [r3, #0]
 8002f64:	6963      	ldr	r3, [r4, #20]
 8002f66:	3001      	adds	r0, #1
 8002f68:	4283      	cmp	r3, r0
 8002f6a:	d004      	beq.n	8002f76 <__swbuf_r+0x62>
 8002f6c:	89a3      	ldrh	r3, [r4, #12]
 8002f6e:	07db      	lsls	r3, r3, #31
 8002f70:	d506      	bpl.n	8002f80 <__swbuf_r+0x6c>
 8002f72:	2e0a      	cmp	r6, #10
 8002f74:	d104      	bne.n	8002f80 <__swbuf_r+0x6c>
 8002f76:	4621      	mov	r1, r4
 8002f78:	4628      	mov	r0, r5
 8002f7a:	f000 f933 	bl	80031e4 <_fflush_r>
 8002f7e:	b988      	cbnz	r0, 8002fa4 <__swbuf_r+0x90>
 8002f80:	4638      	mov	r0, r7
 8002f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f84:	4b0a      	ldr	r3, [pc, #40]	; (8002fb0 <__swbuf_r+0x9c>)
 8002f86:	429c      	cmp	r4, r3
 8002f88:	d101      	bne.n	8002f8e <__swbuf_r+0x7a>
 8002f8a:	68ac      	ldr	r4, [r5, #8]
 8002f8c:	e7cf      	b.n	8002f2e <__swbuf_r+0x1a>
 8002f8e:	4b09      	ldr	r3, [pc, #36]	; (8002fb4 <__swbuf_r+0xa0>)
 8002f90:	429c      	cmp	r4, r3
 8002f92:	bf08      	it	eq
 8002f94:	68ec      	ldreq	r4, [r5, #12]
 8002f96:	e7ca      	b.n	8002f2e <__swbuf_r+0x1a>
 8002f98:	4621      	mov	r1, r4
 8002f9a:	4628      	mov	r0, r5
 8002f9c:	f000 f81e 	bl	8002fdc <__swsetup_r>
 8002fa0:	2800      	cmp	r0, #0
 8002fa2:	d0cb      	beq.n	8002f3c <__swbuf_r+0x28>
 8002fa4:	f04f 37ff 	mov.w	r7, #4294967295
 8002fa8:	e7ea      	b.n	8002f80 <__swbuf_r+0x6c>
 8002faa:	bf00      	nop
 8002fac:	080034c4 	.word	0x080034c4
 8002fb0:	080034e4 	.word	0x080034e4
 8002fb4:	080034a4 	.word	0x080034a4

08002fb8 <_write_r>:
 8002fb8:	b538      	push	{r3, r4, r5, lr}
 8002fba:	4d07      	ldr	r5, [pc, #28]	; (8002fd8 <_write_r+0x20>)
 8002fbc:	4604      	mov	r4, r0
 8002fbe:	4608      	mov	r0, r1
 8002fc0:	4611      	mov	r1, r2
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	602a      	str	r2, [r5, #0]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	f7fd fcf5 	bl	80009b6 <_write>
 8002fcc:	1c43      	adds	r3, r0, #1
 8002fce:	d102      	bne.n	8002fd6 <_write_r+0x1e>
 8002fd0:	682b      	ldr	r3, [r5, #0]
 8002fd2:	b103      	cbz	r3, 8002fd6 <_write_r+0x1e>
 8002fd4:	6023      	str	r3, [r4, #0]
 8002fd6:	bd38      	pop	{r3, r4, r5, pc}
 8002fd8:	200000e4 	.word	0x200000e4

08002fdc <__swsetup_r>:
 8002fdc:	4b32      	ldr	r3, [pc, #200]	; (80030a8 <__swsetup_r+0xcc>)
 8002fde:	b570      	push	{r4, r5, r6, lr}
 8002fe0:	681d      	ldr	r5, [r3, #0]
 8002fe2:	4606      	mov	r6, r0
 8002fe4:	460c      	mov	r4, r1
 8002fe6:	b125      	cbz	r5, 8002ff2 <__swsetup_r+0x16>
 8002fe8:	69ab      	ldr	r3, [r5, #24]
 8002fea:	b913      	cbnz	r3, 8002ff2 <__swsetup_r+0x16>
 8002fec:	4628      	mov	r0, r5
 8002fee:	f7ff fb1b 	bl	8002628 <__sinit>
 8002ff2:	4b2e      	ldr	r3, [pc, #184]	; (80030ac <__swsetup_r+0xd0>)
 8002ff4:	429c      	cmp	r4, r3
 8002ff6:	d10f      	bne.n	8003018 <__swsetup_r+0x3c>
 8002ff8:	686c      	ldr	r4, [r5, #4]
 8002ffa:	89a3      	ldrh	r3, [r4, #12]
 8002ffc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003000:	0719      	lsls	r1, r3, #28
 8003002:	d42c      	bmi.n	800305e <__swsetup_r+0x82>
 8003004:	06dd      	lsls	r5, r3, #27
 8003006:	d411      	bmi.n	800302c <__swsetup_r+0x50>
 8003008:	2309      	movs	r3, #9
 800300a:	6033      	str	r3, [r6, #0]
 800300c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003010:	81a3      	strh	r3, [r4, #12]
 8003012:	f04f 30ff 	mov.w	r0, #4294967295
 8003016:	e03e      	b.n	8003096 <__swsetup_r+0xba>
 8003018:	4b25      	ldr	r3, [pc, #148]	; (80030b0 <__swsetup_r+0xd4>)
 800301a:	429c      	cmp	r4, r3
 800301c:	d101      	bne.n	8003022 <__swsetup_r+0x46>
 800301e:	68ac      	ldr	r4, [r5, #8]
 8003020:	e7eb      	b.n	8002ffa <__swsetup_r+0x1e>
 8003022:	4b24      	ldr	r3, [pc, #144]	; (80030b4 <__swsetup_r+0xd8>)
 8003024:	429c      	cmp	r4, r3
 8003026:	bf08      	it	eq
 8003028:	68ec      	ldreq	r4, [r5, #12]
 800302a:	e7e6      	b.n	8002ffa <__swsetup_r+0x1e>
 800302c:	0758      	lsls	r0, r3, #29
 800302e:	d512      	bpl.n	8003056 <__swsetup_r+0x7a>
 8003030:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003032:	b141      	cbz	r1, 8003046 <__swsetup_r+0x6a>
 8003034:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003038:	4299      	cmp	r1, r3
 800303a:	d002      	beq.n	8003042 <__swsetup_r+0x66>
 800303c:	4630      	mov	r0, r6
 800303e:	f000 f991 	bl	8003364 <_free_r>
 8003042:	2300      	movs	r3, #0
 8003044:	6363      	str	r3, [r4, #52]	; 0x34
 8003046:	89a3      	ldrh	r3, [r4, #12]
 8003048:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800304c:	81a3      	strh	r3, [r4, #12]
 800304e:	2300      	movs	r3, #0
 8003050:	6063      	str	r3, [r4, #4]
 8003052:	6923      	ldr	r3, [r4, #16]
 8003054:	6023      	str	r3, [r4, #0]
 8003056:	89a3      	ldrh	r3, [r4, #12]
 8003058:	f043 0308 	orr.w	r3, r3, #8
 800305c:	81a3      	strh	r3, [r4, #12]
 800305e:	6923      	ldr	r3, [r4, #16]
 8003060:	b94b      	cbnz	r3, 8003076 <__swsetup_r+0x9a>
 8003062:	89a3      	ldrh	r3, [r4, #12]
 8003064:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800306c:	d003      	beq.n	8003076 <__swsetup_r+0x9a>
 800306e:	4621      	mov	r1, r4
 8003070:	4630      	mov	r0, r6
 8003072:	f000 f92b 	bl	80032cc <__smakebuf_r>
 8003076:	89a0      	ldrh	r0, [r4, #12]
 8003078:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800307c:	f010 0301 	ands.w	r3, r0, #1
 8003080:	d00a      	beq.n	8003098 <__swsetup_r+0xbc>
 8003082:	2300      	movs	r3, #0
 8003084:	60a3      	str	r3, [r4, #8]
 8003086:	6963      	ldr	r3, [r4, #20]
 8003088:	425b      	negs	r3, r3
 800308a:	61a3      	str	r3, [r4, #24]
 800308c:	6923      	ldr	r3, [r4, #16]
 800308e:	b943      	cbnz	r3, 80030a2 <__swsetup_r+0xc6>
 8003090:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003094:	d1ba      	bne.n	800300c <__swsetup_r+0x30>
 8003096:	bd70      	pop	{r4, r5, r6, pc}
 8003098:	0781      	lsls	r1, r0, #30
 800309a:	bf58      	it	pl
 800309c:	6963      	ldrpl	r3, [r4, #20]
 800309e:	60a3      	str	r3, [r4, #8]
 80030a0:	e7f4      	b.n	800308c <__swsetup_r+0xb0>
 80030a2:	2000      	movs	r0, #0
 80030a4:	e7f7      	b.n	8003096 <__swsetup_r+0xba>
 80030a6:	bf00      	nop
 80030a8:	2000000c 	.word	0x2000000c
 80030ac:	080034c4 	.word	0x080034c4
 80030b0:	080034e4 	.word	0x080034e4
 80030b4:	080034a4 	.word	0x080034a4

080030b8 <_close_r>:
 80030b8:	b538      	push	{r3, r4, r5, lr}
 80030ba:	4d06      	ldr	r5, [pc, #24]	; (80030d4 <_close_r+0x1c>)
 80030bc:	2300      	movs	r3, #0
 80030be:	4604      	mov	r4, r0
 80030c0:	4608      	mov	r0, r1
 80030c2:	602b      	str	r3, [r5, #0]
 80030c4:	f7fd fc93 	bl	80009ee <_close>
 80030c8:	1c43      	adds	r3, r0, #1
 80030ca:	d102      	bne.n	80030d2 <_close_r+0x1a>
 80030cc:	682b      	ldr	r3, [r5, #0]
 80030ce:	b103      	cbz	r3, 80030d2 <_close_r+0x1a>
 80030d0:	6023      	str	r3, [r4, #0]
 80030d2:	bd38      	pop	{r3, r4, r5, pc}
 80030d4:	200000e4 	.word	0x200000e4

080030d8 <__sflush_r>:
 80030d8:	898a      	ldrh	r2, [r1, #12]
 80030da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030de:	4605      	mov	r5, r0
 80030e0:	0710      	lsls	r0, r2, #28
 80030e2:	460c      	mov	r4, r1
 80030e4:	d458      	bmi.n	8003198 <__sflush_r+0xc0>
 80030e6:	684b      	ldr	r3, [r1, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	dc05      	bgt.n	80030f8 <__sflush_r+0x20>
 80030ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	dc02      	bgt.n	80030f8 <__sflush_r+0x20>
 80030f2:	2000      	movs	r0, #0
 80030f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80030fa:	2e00      	cmp	r6, #0
 80030fc:	d0f9      	beq.n	80030f2 <__sflush_r+0x1a>
 80030fe:	2300      	movs	r3, #0
 8003100:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003104:	682f      	ldr	r7, [r5, #0]
 8003106:	602b      	str	r3, [r5, #0]
 8003108:	d032      	beq.n	8003170 <__sflush_r+0x98>
 800310a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800310c:	89a3      	ldrh	r3, [r4, #12]
 800310e:	075a      	lsls	r2, r3, #29
 8003110:	d505      	bpl.n	800311e <__sflush_r+0x46>
 8003112:	6863      	ldr	r3, [r4, #4]
 8003114:	1ac0      	subs	r0, r0, r3
 8003116:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003118:	b10b      	cbz	r3, 800311e <__sflush_r+0x46>
 800311a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800311c:	1ac0      	subs	r0, r0, r3
 800311e:	2300      	movs	r3, #0
 8003120:	4602      	mov	r2, r0
 8003122:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003124:	6a21      	ldr	r1, [r4, #32]
 8003126:	4628      	mov	r0, r5
 8003128:	47b0      	blx	r6
 800312a:	1c43      	adds	r3, r0, #1
 800312c:	89a3      	ldrh	r3, [r4, #12]
 800312e:	d106      	bne.n	800313e <__sflush_r+0x66>
 8003130:	6829      	ldr	r1, [r5, #0]
 8003132:	291d      	cmp	r1, #29
 8003134:	d82c      	bhi.n	8003190 <__sflush_r+0xb8>
 8003136:	4a2a      	ldr	r2, [pc, #168]	; (80031e0 <__sflush_r+0x108>)
 8003138:	40ca      	lsrs	r2, r1
 800313a:	07d6      	lsls	r6, r2, #31
 800313c:	d528      	bpl.n	8003190 <__sflush_r+0xb8>
 800313e:	2200      	movs	r2, #0
 8003140:	6062      	str	r2, [r4, #4]
 8003142:	04d9      	lsls	r1, r3, #19
 8003144:	6922      	ldr	r2, [r4, #16]
 8003146:	6022      	str	r2, [r4, #0]
 8003148:	d504      	bpl.n	8003154 <__sflush_r+0x7c>
 800314a:	1c42      	adds	r2, r0, #1
 800314c:	d101      	bne.n	8003152 <__sflush_r+0x7a>
 800314e:	682b      	ldr	r3, [r5, #0]
 8003150:	b903      	cbnz	r3, 8003154 <__sflush_r+0x7c>
 8003152:	6560      	str	r0, [r4, #84]	; 0x54
 8003154:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003156:	602f      	str	r7, [r5, #0]
 8003158:	2900      	cmp	r1, #0
 800315a:	d0ca      	beq.n	80030f2 <__sflush_r+0x1a>
 800315c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003160:	4299      	cmp	r1, r3
 8003162:	d002      	beq.n	800316a <__sflush_r+0x92>
 8003164:	4628      	mov	r0, r5
 8003166:	f000 f8fd 	bl	8003364 <_free_r>
 800316a:	2000      	movs	r0, #0
 800316c:	6360      	str	r0, [r4, #52]	; 0x34
 800316e:	e7c1      	b.n	80030f4 <__sflush_r+0x1c>
 8003170:	6a21      	ldr	r1, [r4, #32]
 8003172:	2301      	movs	r3, #1
 8003174:	4628      	mov	r0, r5
 8003176:	47b0      	blx	r6
 8003178:	1c41      	adds	r1, r0, #1
 800317a:	d1c7      	bne.n	800310c <__sflush_r+0x34>
 800317c:	682b      	ldr	r3, [r5, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d0c4      	beq.n	800310c <__sflush_r+0x34>
 8003182:	2b1d      	cmp	r3, #29
 8003184:	d001      	beq.n	800318a <__sflush_r+0xb2>
 8003186:	2b16      	cmp	r3, #22
 8003188:	d101      	bne.n	800318e <__sflush_r+0xb6>
 800318a:	602f      	str	r7, [r5, #0]
 800318c:	e7b1      	b.n	80030f2 <__sflush_r+0x1a>
 800318e:	89a3      	ldrh	r3, [r4, #12]
 8003190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003194:	81a3      	strh	r3, [r4, #12]
 8003196:	e7ad      	b.n	80030f4 <__sflush_r+0x1c>
 8003198:	690f      	ldr	r7, [r1, #16]
 800319a:	2f00      	cmp	r7, #0
 800319c:	d0a9      	beq.n	80030f2 <__sflush_r+0x1a>
 800319e:	0793      	lsls	r3, r2, #30
 80031a0:	680e      	ldr	r6, [r1, #0]
 80031a2:	bf08      	it	eq
 80031a4:	694b      	ldreq	r3, [r1, #20]
 80031a6:	600f      	str	r7, [r1, #0]
 80031a8:	bf18      	it	ne
 80031aa:	2300      	movne	r3, #0
 80031ac:	eba6 0807 	sub.w	r8, r6, r7
 80031b0:	608b      	str	r3, [r1, #8]
 80031b2:	f1b8 0f00 	cmp.w	r8, #0
 80031b6:	dd9c      	ble.n	80030f2 <__sflush_r+0x1a>
 80031b8:	6a21      	ldr	r1, [r4, #32]
 80031ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80031bc:	4643      	mov	r3, r8
 80031be:	463a      	mov	r2, r7
 80031c0:	4628      	mov	r0, r5
 80031c2:	47b0      	blx	r6
 80031c4:	2800      	cmp	r0, #0
 80031c6:	dc06      	bgt.n	80031d6 <__sflush_r+0xfe>
 80031c8:	89a3      	ldrh	r3, [r4, #12]
 80031ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031ce:	81a3      	strh	r3, [r4, #12]
 80031d0:	f04f 30ff 	mov.w	r0, #4294967295
 80031d4:	e78e      	b.n	80030f4 <__sflush_r+0x1c>
 80031d6:	4407      	add	r7, r0
 80031d8:	eba8 0800 	sub.w	r8, r8, r0
 80031dc:	e7e9      	b.n	80031b2 <__sflush_r+0xda>
 80031de:	bf00      	nop
 80031e0:	20400001 	.word	0x20400001

080031e4 <_fflush_r>:
 80031e4:	b538      	push	{r3, r4, r5, lr}
 80031e6:	690b      	ldr	r3, [r1, #16]
 80031e8:	4605      	mov	r5, r0
 80031ea:	460c      	mov	r4, r1
 80031ec:	b913      	cbnz	r3, 80031f4 <_fflush_r+0x10>
 80031ee:	2500      	movs	r5, #0
 80031f0:	4628      	mov	r0, r5
 80031f2:	bd38      	pop	{r3, r4, r5, pc}
 80031f4:	b118      	cbz	r0, 80031fe <_fflush_r+0x1a>
 80031f6:	6983      	ldr	r3, [r0, #24]
 80031f8:	b90b      	cbnz	r3, 80031fe <_fflush_r+0x1a>
 80031fa:	f7ff fa15 	bl	8002628 <__sinit>
 80031fe:	4b14      	ldr	r3, [pc, #80]	; (8003250 <_fflush_r+0x6c>)
 8003200:	429c      	cmp	r4, r3
 8003202:	d11b      	bne.n	800323c <_fflush_r+0x58>
 8003204:	686c      	ldr	r4, [r5, #4]
 8003206:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0ef      	beq.n	80031ee <_fflush_r+0xa>
 800320e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003210:	07d0      	lsls	r0, r2, #31
 8003212:	d404      	bmi.n	800321e <_fflush_r+0x3a>
 8003214:	0599      	lsls	r1, r3, #22
 8003216:	d402      	bmi.n	800321e <_fflush_r+0x3a>
 8003218:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800321a:	f7ff faa3 	bl	8002764 <__retarget_lock_acquire_recursive>
 800321e:	4628      	mov	r0, r5
 8003220:	4621      	mov	r1, r4
 8003222:	f7ff ff59 	bl	80030d8 <__sflush_r>
 8003226:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003228:	07da      	lsls	r2, r3, #31
 800322a:	4605      	mov	r5, r0
 800322c:	d4e0      	bmi.n	80031f0 <_fflush_r+0xc>
 800322e:	89a3      	ldrh	r3, [r4, #12]
 8003230:	059b      	lsls	r3, r3, #22
 8003232:	d4dd      	bmi.n	80031f0 <_fflush_r+0xc>
 8003234:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003236:	f7ff fa96 	bl	8002766 <__retarget_lock_release_recursive>
 800323a:	e7d9      	b.n	80031f0 <_fflush_r+0xc>
 800323c:	4b05      	ldr	r3, [pc, #20]	; (8003254 <_fflush_r+0x70>)
 800323e:	429c      	cmp	r4, r3
 8003240:	d101      	bne.n	8003246 <_fflush_r+0x62>
 8003242:	68ac      	ldr	r4, [r5, #8]
 8003244:	e7df      	b.n	8003206 <_fflush_r+0x22>
 8003246:	4b04      	ldr	r3, [pc, #16]	; (8003258 <_fflush_r+0x74>)
 8003248:	429c      	cmp	r4, r3
 800324a:	bf08      	it	eq
 800324c:	68ec      	ldreq	r4, [r5, #12]
 800324e:	e7da      	b.n	8003206 <_fflush_r+0x22>
 8003250:	080034c4 	.word	0x080034c4
 8003254:	080034e4 	.word	0x080034e4
 8003258:	080034a4 	.word	0x080034a4

0800325c <_lseek_r>:
 800325c:	b538      	push	{r3, r4, r5, lr}
 800325e:	4d07      	ldr	r5, [pc, #28]	; (800327c <_lseek_r+0x20>)
 8003260:	4604      	mov	r4, r0
 8003262:	4608      	mov	r0, r1
 8003264:	4611      	mov	r1, r2
 8003266:	2200      	movs	r2, #0
 8003268:	602a      	str	r2, [r5, #0]
 800326a:	461a      	mov	r2, r3
 800326c:	f7fd fbe6 	bl	8000a3c <_lseek>
 8003270:	1c43      	adds	r3, r0, #1
 8003272:	d102      	bne.n	800327a <_lseek_r+0x1e>
 8003274:	682b      	ldr	r3, [r5, #0]
 8003276:	b103      	cbz	r3, 800327a <_lseek_r+0x1e>
 8003278:	6023      	str	r3, [r4, #0]
 800327a:	bd38      	pop	{r3, r4, r5, pc}
 800327c:	200000e4 	.word	0x200000e4

08003280 <__swhatbuf_r>:
 8003280:	b570      	push	{r4, r5, r6, lr}
 8003282:	460e      	mov	r6, r1
 8003284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003288:	2900      	cmp	r1, #0
 800328a:	b096      	sub	sp, #88	; 0x58
 800328c:	4614      	mov	r4, r2
 800328e:	461d      	mov	r5, r3
 8003290:	da08      	bge.n	80032a4 <__swhatbuf_r+0x24>
 8003292:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	602a      	str	r2, [r5, #0]
 800329a:	061a      	lsls	r2, r3, #24
 800329c:	d410      	bmi.n	80032c0 <__swhatbuf_r+0x40>
 800329e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032a2:	e00e      	b.n	80032c2 <__swhatbuf_r+0x42>
 80032a4:	466a      	mov	r2, sp
 80032a6:	f000 f8bb 	bl	8003420 <_fstat_r>
 80032aa:	2800      	cmp	r0, #0
 80032ac:	dbf1      	blt.n	8003292 <__swhatbuf_r+0x12>
 80032ae:	9a01      	ldr	r2, [sp, #4]
 80032b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80032b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80032b8:	425a      	negs	r2, r3
 80032ba:	415a      	adcs	r2, r3
 80032bc:	602a      	str	r2, [r5, #0]
 80032be:	e7ee      	b.n	800329e <__swhatbuf_r+0x1e>
 80032c0:	2340      	movs	r3, #64	; 0x40
 80032c2:	2000      	movs	r0, #0
 80032c4:	6023      	str	r3, [r4, #0]
 80032c6:	b016      	add	sp, #88	; 0x58
 80032c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080032cc <__smakebuf_r>:
 80032cc:	898b      	ldrh	r3, [r1, #12]
 80032ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80032d0:	079d      	lsls	r5, r3, #30
 80032d2:	4606      	mov	r6, r0
 80032d4:	460c      	mov	r4, r1
 80032d6:	d507      	bpl.n	80032e8 <__smakebuf_r+0x1c>
 80032d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80032dc:	6023      	str	r3, [r4, #0]
 80032de:	6123      	str	r3, [r4, #16]
 80032e0:	2301      	movs	r3, #1
 80032e2:	6163      	str	r3, [r4, #20]
 80032e4:	b002      	add	sp, #8
 80032e6:	bd70      	pop	{r4, r5, r6, pc}
 80032e8:	ab01      	add	r3, sp, #4
 80032ea:	466a      	mov	r2, sp
 80032ec:	f7ff ffc8 	bl	8003280 <__swhatbuf_r>
 80032f0:	9900      	ldr	r1, [sp, #0]
 80032f2:	4605      	mov	r5, r0
 80032f4:	4630      	mov	r0, r6
 80032f6:	f7ff fa57 	bl	80027a8 <_malloc_r>
 80032fa:	b948      	cbnz	r0, 8003310 <__smakebuf_r+0x44>
 80032fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003300:	059a      	lsls	r2, r3, #22
 8003302:	d4ef      	bmi.n	80032e4 <__smakebuf_r+0x18>
 8003304:	f023 0303 	bic.w	r3, r3, #3
 8003308:	f043 0302 	orr.w	r3, r3, #2
 800330c:	81a3      	strh	r3, [r4, #12]
 800330e:	e7e3      	b.n	80032d8 <__smakebuf_r+0xc>
 8003310:	4b0d      	ldr	r3, [pc, #52]	; (8003348 <__smakebuf_r+0x7c>)
 8003312:	62b3      	str	r3, [r6, #40]	; 0x28
 8003314:	89a3      	ldrh	r3, [r4, #12]
 8003316:	6020      	str	r0, [r4, #0]
 8003318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800331c:	81a3      	strh	r3, [r4, #12]
 800331e:	9b00      	ldr	r3, [sp, #0]
 8003320:	6163      	str	r3, [r4, #20]
 8003322:	9b01      	ldr	r3, [sp, #4]
 8003324:	6120      	str	r0, [r4, #16]
 8003326:	b15b      	cbz	r3, 8003340 <__smakebuf_r+0x74>
 8003328:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800332c:	4630      	mov	r0, r6
 800332e:	f000 f889 	bl	8003444 <_isatty_r>
 8003332:	b128      	cbz	r0, 8003340 <__smakebuf_r+0x74>
 8003334:	89a3      	ldrh	r3, [r4, #12]
 8003336:	f023 0303 	bic.w	r3, r3, #3
 800333a:	f043 0301 	orr.w	r3, r3, #1
 800333e:	81a3      	strh	r3, [r4, #12]
 8003340:	89a0      	ldrh	r0, [r4, #12]
 8003342:	4305      	orrs	r5, r0
 8003344:	81a5      	strh	r5, [r4, #12]
 8003346:	e7cd      	b.n	80032e4 <__smakebuf_r+0x18>
 8003348:	080025c1 	.word	0x080025c1

0800334c <__malloc_lock>:
 800334c:	4801      	ldr	r0, [pc, #4]	; (8003354 <__malloc_lock+0x8>)
 800334e:	f7ff ba09 	b.w	8002764 <__retarget_lock_acquire_recursive>
 8003352:	bf00      	nop
 8003354:	200000d8 	.word	0x200000d8

08003358 <__malloc_unlock>:
 8003358:	4801      	ldr	r0, [pc, #4]	; (8003360 <__malloc_unlock+0x8>)
 800335a:	f7ff ba04 	b.w	8002766 <__retarget_lock_release_recursive>
 800335e:	bf00      	nop
 8003360:	200000d8 	.word	0x200000d8

08003364 <_free_r>:
 8003364:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003366:	2900      	cmp	r1, #0
 8003368:	d044      	beq.n	80033f4 <_free_r+0x90>
 800336a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800336e:	9001      	str	r0, [sp, #4]
 8003370:	2b00      	cmp	r3, #0
 8003372:	f1a1 0404 	sub.w	r4, r1, #4
 8003376:	bfb8      	it	lt
 8003378:	18e4      	addlt	r4, r4, r3
 800337a:	f7ff ffe7 	bl	800334c <__malloc_lock>
 800337e:	4a1e      	ldr	r2, [pc, #120]	; (80033f8 <_free_r+0x94>)
 8003380:	9801      	ldr	r0, [sp, #4]
 8003382:	6813      	ldr	r3, [r2, #0]
 8003384:	b933      	cbnz	r3, 8003394 <_free_r+0x30>
 8003386:	6063      	str	r3, [r4, #4]
 8003388:	6014      	str	r4, [r2, #0]
 800338a:	b003      	add	sp, #12
 800338c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003390:	f7ff bfe2 	b.w	8003358 <__malloc_unlock>
 8003394:	42a3      	cmp	r3, r4
 8003396:	d908      	bls.n	80033aa <_free_r+0x46>
 8003398:	6825      	ldr	r5, [r4, #0]
 800339a:	1961      	adds	r1, r4, r5
 800339c:	428b      	cmp	r3, r1
 800339e:	bf01      	itttt	eq
 80033a0:	6819      	ldreq	r1, [r3, #0]
 80033a2:	685b      	ldreq	r3, [r3, #4]
 80033a4:	1949      	addeq	r1, r1, r5
 80033a6:	6021      	streq	r1, [r4, #0]
 80033a8:	e7ed      	b.n	8003386 <_free_r+0x22>
 80033aa:	461a      	mov	r2, r3
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	b10b      	cbz	r3, 80033b4 <_free_r+0x50>
 80033b0:	42a3      	cmp	r3, r4
 80033b2:	d9fa      	bls.n	80033aa <_free_r+0x46>
 80033b4:	6811      	ldr	r1, [r2, #0]
 80033b6:	1855      	adds	r5, r2, r1
 80033b8:	42a5      	cmp	r5, r4
 80033ba:	d10b      	bne.n	80033d4 <_free_r+0x70>
 80033bc:	6824      	ldr	r4, [r4, #0]
 80033be:	4421      	add	r1, r4
 80033c0:	1854      	adds	r4, r2, r1
 80033c2:	42a3      	cmp	r3, r4
 80033c4:	6011      	str	r1, [r2, #0]
 80033c6:	d1e0      	bne.n	800338a <_free_r+0x26>
 80033c8:	681c      	ldr	r4, [r3, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	6053      	str	r3, [r2, #4]
 80033ce:	4421      	add	r1, r4
 80033d0:	6011      	str	r1, [r2, #0]
 80033d2:	e7da      	b.n	800338a <_free_r+0x26>
 80033d4:	d902      	bls.n	80033dc <_free_r+0x78>
 80033d6:	230c      	movs	r3, #12
 80033d8:	6003      	str	r3, [r0, #0]
 80033da:	e7d6      	b.n	800338a <_free_r+0x26>
 80033dc:	6825      	ldr	r5, [r4, #0]
 80033de:	1961      	adds	r1, r4, r5
 80033e0:	428b      	cmp	r3, r1
 80033e2:	bf04      	itt	eq
 80033e4:	6819      	ldreq	r1, [r3, #0]
 80033e6:	685b      	ldreq	r3, [r3, #4]
 80033e8:	6063      	str	r3, [r4, #4]
 80033ea:	bf04      	itt	eq
 80033ec:	1949      	addeq	r1, r1, r5
 80033ee:	6021      	streq	r1, [r4, #0]
 80033f0:	6054      	str	r4, [r2, #4]
 80033f2:	e7ca      	b.n	800338a <_free_r+0x26>
 80033f4:	b003      	add	sp, #12
 80033f6:	bd30      	pop	{r4, r5, pc}
 80033f8:	200000dc 	.word	0x200000dc

080033fc <_read_r>:
 80033fc:	b538      	push	{r3, r4, r5, lr}
 80033fe:	4d07      	ldr	r5, [pc, #28]	; (800341c <_read_r+0x20>)
 8003400:	4604      	mov	r4, r0
 8003402:	4608      	mov	r0, r1
 8003404:	4611      	mov	r1, r2
 8003406:	2200      	movs	r2, #0
 8003408:	602a      	str	r2, [r5, #0]
 800340a:	461a      	mov	r2, r3
 800340c:	f7fd fab6 	bl	800097c <_read>
 8003410:	1c43      	adds	r3, r0, #1
 8003412:	d102      	bne.n	800341a <_read_r+0x1e>
 8003414:	682b      	ldr	r3, [r5, #0]
 8003416:	b103      	cbz	r3, 800341a <_read_r+0x1e>
 8003418:	6023      	str	r3, [r4, #0]
 800341a:	bd38      	pop	{r3, r4, r5, pc}
 800341c:	200000e4 	.word	0x200000e4

08003420 <_fstat_r>:
 8003420:	b538      	push	{r3, r4, r5, lr}
 8003422:	4d07      	ldr	r5, [pc, #28]	; (8003440 <_fstat_r+0x20>)
 8003424:	2300      	movs	r3, #0
 8003426:	4604      	mov	r4, r0
 8003428:	4608      	mov	r0, r1
 800342a:	4611      	mov	r1, r2
 800342c:	602b      	str	r3, [r5, #0]
 800342e:	f7fd faea 	bl	8000a06 <_fstat>
 8003432:	1c43      	adds	r3, r0, #1
 8003434:	d102      	bne.n	800343c <_fstat_r+0x1c>
 8003436:	682b      	ldr	r3, [r5, #0]
 8003438:	b103      	cbz	r3, 800343c <_fstat_r+0x1c>
 800343a:	6023      	str	r3, [r4, #0]
 800343c:	bd38      	pop	{r3, r4, r5, pc}
 800343e:	bf00      	nop
 8003440:	200000e4 	.word	0x200000e4

08003444 <_isatty_r>:
 8003444:	b538      	push	{r3, r4, r5, lr}
 8003446:	4d06      	ldr	r5, [pc, #24]	; (8003460 <_isatty_r+0x1c>)
 8003448:	2300      	movs	r3, #0
 800344a:	4604      	mov	r4, r0
 800344c:	4608      	mov	r0, r1
 800344e:	602b      	str	r3, [r5, #0]
 8003450:	f7fd fae9 	bl	8000a26 <_isatty>
 8003454:	1c43      	adds	r3, r0, #1
 8003456:	d102      	bne.n	800345e <_isatty_r+0x1a>
 8003458:	682b      	ldr	r3, [r5, #0]
 800345a:	b103      	cbz	r3, 800345e <_isatty_r+0x1a>
 800345c:	6023      	str	r3, [r4, #0]
 800345e:	bd38      	pop	{r3, r4, r5, pc}
 8003460:	200000e4 	.word	0x200000e4

08003464 <_init>:
 8003464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003466:	bf00      	nop
 8003468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800346a:	bc08      	pop	{r3}
 800346c:	469e      	mov	lr, r3
 800346e:	4770      	bx	lr

08003470 <_fini>:
 8003470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003472:	bf00      	nop
 8003474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003476:	bc08      	pop	{r3}
 8003478:	469e      	mov	lr, r3
 800347a:	4770      	bx	lr
